{"version":3,"file":"pages-checkout-confirmation.js","mappings":"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","sources":["webpack://bay-rewrite/./app/components/address-display/index.jsx","webpack://bay-rewrite/./app/components/forms/post-checkout-registration-fields.jsx","webpack://bay-rewrite/./app/pages/checkout/confirmation.jsx","webpack://bay-rewrite/./app/utils/cc-utils.js"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Box, Text} from '@chakra-ui/react'\n\nconst AddressDisplay = ({address}) => {\n    return (\n        <Box>\n            <Text>\n                {address.firstName} {address.lastName}\n            </Text>\n            <Text>{address.address1}</Text>\n            <Text>\n                {address.city}, {address.stateCode} {address.postalCode}\n            </Text>\n            <Text>{address.countryCode}</Text>\n        </Box>\n    )\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.object\n}\n\nexport default AddressDisplay\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Stack, Box} from '@chakra-ui/react'\nimport useRegistrationFields from './useRegistrationFields'\nimport PasswordRequirements from './password-requirements'\nimport Field from '../field'\n\nconst PostCheckoutRegistrationFields = ({form, prefix = ''}) => {\n    const fields = useRegistrationFields({form, prefix})\n    const password = form.watch(`${prefix}password`)\n\n    return (\n        <Box>\n            <Stack spacing={5}>\n                <Field {...fields.email} />\n\n                <Stack spacing={3} paddingBottom={2}>\n                    <Field {...fields.password} />\n                    <PasswordRequirements value={password} />\n                </Stack>\n            </Stack>\n\n            <Field {...fields.firstName} type=\"hidden\" />\n            <Field {...fields.lastName} type=\"hidden\" />\n        </Box>\n    )\n}\n\nPostCheckoutRegistrationFields.propTypes = {\n    /** Object returned from `useForm` */\n    form: PropTypes.object.isRequired,\n\n    /** Optional prefix for field names */\n    prefix: PropTypes.string\n}\n\nexport default PostCheckoutRegistrationFields\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useEffect, useState, Fragment} from 'react'\nimport {FormattedMessage, FormattedNumber} from 'react-intl'\nimport {\n    Box,\n    Button,\n    Container,\n    Flex,\n    Heading,\n    SimpleGrid,\n    Spacer,\n    Stack,\n    Text,\n    Alert,\n    AlertIcon,\n    Divider\n} from '@chakra-ui/react'\nimport {useForm} from 'react-hook-form'\nimport {getCreditCardIcon} from '../../utils/cc-utils'\nimport useBasket from '../../commerce-api/hooks/useBasket'\nimport useCustomer from '../../commerce-api/hooks/useCustomer'\nimport useNavigation from '../../hooks/use-navigation'\nimport Link from '../../components/link'\nimport AddressDisplay from '../../components/address-display'\nimport PostCheckoutRegistrationFields from '../../components/forms/post-checkout-registration-fields'\nimport PromoPopover from '../../components/promo-popover'\nimport ItemVariantProvider from '../../components/item-variant'\nimport CartItemVariantImage from '../../components/item-variant/item-image'\nimport CartItemVariantName from '../../components/item-variant/item-name'\nimport CartItemVariantAttributes from '../../components/item-variant/item-attributes'\nimport CartItemVariantPrice from '../../components/item-variant/item-price'\n\nconst CheckoutConfirmation = () => {\n    const navigate = useNavigation()\n    const basket = useBasket()\n    const customer = useCustomer()\n\n    // The order data will initially be stored as our basket when first coming to this\n    // page. We capture it in local state to use for our UI. A new basket will be automatically\n    // created so we should only reference our captured order data here.\n    const [order] = useState(basket)\n\n    const form = useForm({\n        defaultValues: {\n            email: customer?.email || order?.customerInfo?.email || '',\n            password: '',\n            firstName: customer.firstName || order?.billingAddress?.firstName,\n            lastName: customer.lastName || order?.billingAddress?.lastName\n        }\n    })\n\n    // If we don't have an order object on first render we need to transition back to a\n    // different page. Fow now, we push to the homepage.\n    useEffect(() => {\n        if (!order || order._type !== 'order') {\n            navigate('/')\n        }\n    }, [order])\n\n    if (!order || !order.orderNo) {\n        return null\n    }\n\n    const CardIcon = getCreditCardIcon(order.paymentInstruments[0].paymentCard?.cardType)\n\n    const submitForm = async (data) => {\n        try {\n            await customer.registerCustomer(data)\n        } catch (error) {\n            const existingAccountMessage = (\n                <Fragment>\n                    <FormattedMessage defaultMessage=\"This email already has an account.\" />\n                    &nbsp;\n                    <Link to=\"/login\" color=\"blue.600\">\n                        <FormattedMessage defaultMessage=\"Log in here\" />\n                    </Link>\n                </Fragment>\n            )\n\n            const message = /the login is already in use/i.test(error.message)\n                ? existingAccountMessage\n                : error.message\n\n            form.setError('global', {type: 'manual', message})\n            return\n        }\n\n        // Customer is successfully registered with a new account,\n        // and the recent order would be associated with this account too.\n        // Now redirect to the Account page.\n        navigate(`/account`)\n    }\n\n    return (\n        <Box background=\"gray.50\">\n            <Container\n                maxWidth=\"container.md\"\n                py={{base: 7, md: 16}}\n                px={{base: 0, md: 4}}\n                data-testid=\"sf-checkout-confirmation-container\"\n            >\n                <Stack spacing={4}>\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Stack spacing={6}>\n                            <Heading align=\"center\" fontSize={['2xl']}>\n                                <FormattedMessage defaultMessage=\"Thank you for your order!\" />\n                            </Heading>\n\n                            <Box>\n                                <Container variant=\"form\">\n                                    <Stack spacing={3}>\n                                        <Text align=\"center\">\n                                            <FormattedMessage defaultMessage=\"Order Number\" />:{' '}\n                                            <Text as=\"span\" fontWeight=\"bold\">\n                                                {order.orderNo}\n                                            </Text>\n                                        </Text>\n                                        <Text align=\"center\">\n                                            <FormattedMessage\n                                                defaultMessage=\"We will send an email to <b>{email}</b> with your confirmation number and receipt shortly.\"\n                                                values={{\n                                                    // eslint-disable-next-line react/display-name\n                                                    b: (chunks) => <b>{chunks}</b>,\n                                                    email: order.customerInfo.email\n                                                }}\n                                            />\n                                        </Text>\n\n                                        <Spacer />\n\n                                        <Button as={Link} href=\"/\" variant=\"outline\">\n                                            <FormattedMessage defaultMessage=\"Continue Shopping\" />\n                                        </Button>\n                                    </Stack>\n                                </Container>\n                            </Box>\n                        </Stack>\n                    </Box>\n\n                    {customer.isGuest && (\n                        <Box\n                            layerStyle=\"card\"\n                            rounded={[0, 0, 'base']}\n                            px={[4, 4, 6]}\n                            py={[6, 6, 8]}\n                        >\n                            <Container variant=\"form\">\n                                <Heading fontSize=\"lg\" marginBottom={6}>\n                                    <FormattedMessage defaultMessage=\"Create an account for faster checkout\" />\n                                </Heading>\n\n                                <form onSubmit={form.handleSubmit(submitForm)}>\n                                    <Stack spacing={4}>\n                                        {form.errors?.global && (\n                                            <Alert status=\"error\">\n                                                <AlertIcon />\n                                                {form.errors.global.message}\n                                            </Alert>\n                                        )}\n\n                                        <PostCheckoutRegistrationFields form={form} />\n\n                                        <Button\n                                            type=\"submit\"\n                                            width=\"full\"\n                                            onClick={() => form.clearErrors('global')}\n                                            isLoading={form.formState.isSubmitting}\n                                        >\n                                            <FormattedMessage defaultMessage=\"Create Account\" />\n                                        </Button>\n                                    </Stack>\n                                </form>\n                            </Container>\n                        </Box>\n                    )}\n\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Container variant=\"form\">\n                            <Stack spacing={6}>\n                                <Heading fontSize=\"lg\">\n                                    <FormattedMessage defaultMessage=\"Delivery Details\" />\n                                </Heading>\n\n                                <SimpleGrid columns={[1, 1, 2]} spacing={6}>\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage defaultMessage=\"Shipping Address\" />\n                                        </Heading>\n                                        <AddressDisplay\n                                            address={order.shipments[0].shippingAddress}\n                                        />\n                                    </Stack>\n\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage defaultMessage=\"Shipping Method\" />\n                                        </Heading>\n                                        <Box>\n                                            <Text>{order.shipments[0].shippingMethod.name}</Text>\n                                            <Text>\n                                                {order.shipments[0].shippingMethod.description}\n                                            </Text>\n                                        </Box>\n                                    </Stack>\n                                </SimpleGrid>\n                            </Stack>\n                        </Container>\n                    </Box>\n\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Container variant=\"form\">\n                            <Stack spacing={6}>\n                                <Heading fontSize=\"lg\">\n                                    <FormattedMessage defaultMessage=\"Order Summary\" />\n                                </Heading>\n\n                                <Stack spacing={4}>\n                                    <Text>\n                                        <FormattedMessage\n                                            description=\"# item(s) in order\"\n                                            defaultMessage=\"{itemCount, plural, =0 {0 items} one {# item} other {# items}}\"\n                                            values={{\n                                                itemCount: order.productItems.reduce(\n                                                    (a, b) => a + b.quantity,\n                                                    0\n                                                )\n                                            }}\n                                        />\n                                    </Text>\n\n                                    <Stack spacing={5} align=\"flex-start\">\n                                        <Stack\n                                            spacing={5}\n                                            align=\"flex-start\"\n                                            width=\"full\"\n                                            divider={<Divider />}\n                                        >\n                                            {order.productItems?.map((product, idx) => {\n                                                const variant = {\n                                                    ...product,\n                                                    ...(order._productItemsDetail &&\n                                                        order._productItemsDetail[\n                                                            product.productId\n                                                        ]),\n                                                    price: product.price\n                                                }\n                                                return (\n                                                    <ItemVariantProvider\n                                                        key={product.productId}\n                                                        index={idx}\n                                                        variant={variant}\n                                                    >\n                                                        <Flex width=\"full\" alignItems=\"flex-start\">\n                                                            <CartItemVariantImage\n                                                                width=\"80px\"\n                                                                mr={2}\n                                                            />\n                                                            <Stack\n                                                                spacing={1}\n                                                                marginTop=\"-3px\"\n                                                                flex={1}\n                                                            >\n                                                                <CartItemVariantName />\n                                                                <Flex\n                                                                    width=\"full\"\n                                                                    justifyContent=\"space-between\"\n                                                                    alignItems=\"flex-end\"\n                                                                >\n                                                                    <CartItemVariantAttributes\n                                                                        includeQuantity\n                                                                    />\n                                                                    <CartItemVariantPrice />\n                                                                </Flex>\n                                                            </Stack>\n                                                        </Flex>\n                                                    </ItemVariantProvider>\n                                                )\n                                            })}\n                                        </Stack>\n\n                                        <Stack w=\"full\" py={4} borderY=\"1px\" borderColor=\"gray.200\">\n                                            <Flex justify=\"space-between\">\n                                                <Text fontWeight=\"bold\">\n                                                    <FormattedMessage defaultMessage=\"Subtotal\" />\n                                                </Text>\n                                                <Text fontWeight=\"bold\">\n                                                    <FormattedNumber\n                                                        style=\"currency\"\n                                                        currency={order?.currency}\n                                                        value={order?.productSubTotal}\n                                                    />\n                                                </Text>\n                                            </Flex>\n                                            {order.orderPriceAdjustments?.map((adjustment) => (\n                                                <Flex\n                                                    justify=\"space-between\"\n                                                    key={adjustment.priceAdjustmentId}\n                                                >\n                                                    <Text>{adjustment.itemText}</Text>\n                                                    <Text color=\"green.500\">\n                                                        <FormattedNumber\n                                                            style=\"currency\"\n                                                            currency={order?.currency}\n                                                            value={adjustment.price}\n                                                        />\n                                                    </Text>\n                                                </Flex>\n                                            ))}\n                                            <Flex justify=\"space-between\">\n                                                <Flex alignItems=\"center\">\n                                                    <Text lineHeight={1}>\n                                                        <FormattedMessage defaultMessage=\"Shipping\" />\n                                                        {order.shippingItems[0].priceAdjustments\n                                                            ?.length > 0 && (\n                                                            <Text as=\"span\" ml={1}>\n                                                                (\n                                                                <FormattedMessage defaultMessage=\"promo applied\" />\n                                                                )\n                                                            </Text>\n                                                        )}\n                                                    </Text>\n                                                    {order.shippingItems?.[0]?.priceAdjustments\n                                                        ?.length > 0 && (\n                                                        <PromoPopover ml={2}>\n                                                            <Stack>\n                                                                {order.shippingItems[0].priceAdjustments?.map(\n                                                                    (adjustment) => (\n                                                                        <Text\n                                                                            key={\n                                                                                adjustment.priceAdjustmentId\n                                                                            }\n                                                                            fontSize=\"sm\"\n                                                                        >\n                                                                            {adjustment.itemText}\n                                                                        </Text>\n                                                                    )\n                                                                )}\n                                                            </Stack>\n                                                        </PromoPopover>\n                                                    )}\n                                                </Flex>\n\n                                                {order.shippingItems[0].priceAdjustments?.some(\n                                                    ({appliedDiscount}) =>\n                                                        appliedDiscount?.type === 'free'\n                                                ) ? (\n                                                    <Text\n                                                        as=\"span\"\n                                                        color=\"green.500\"\n                                                        textTransform=\"uppercase\"\n                                                    >\n                                                        <FormattedMessage defaultMessage=\"Free\" />\n                                                    </Text>\n                                                ) : (\n                                                    <Text>\n                                                        <FormattedNumber\n                                                            value={order.shippingTotal}\n                                                            style=\"currency\"\n                                                            currency={order.currency}\n                                                        />\n                                                    </Text>\n                                                )}\n                                            </Flex>\n                                            <Flex justify=\"space-between\">\n                                                <Text>\n                                                    <FormattedMessage defaultMessage=\"Tax\" />\n                                                </Text>\n                                                <Text>\n                                                    <FormattedNumber\n                                                        value={order.taxTotal}\n                                                        style=\"currency\"\n                                                        currency={order.currency}\n                                                    />\n                                                </Text>\n                                            </Flex>\n                                        </Stack>\n\n                                        <Flex w=\"full\" justify=\"space-between\">\n                                            <Text fontWeight=\"bold\">\n                                                <FormattedMessage defaultMessage=\"Order Total\" />\n                                            </Text>\n                                            <Text fontWeight=\"bold\">\n                                                <FormattedNumber\n                                                    style=\"currency\"\n                                                    currency={order?.currency}\n                                                    value={order?.orderTotal}\n                                                />\n                                            </Text>\n                                        </Flex>\n                                    </Stack>\n                                </Stack>\n                            </Stack>\n                        </Container>\n                    </Box>\n\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Container variant=\"form\">\n                            <Stack spacing={6}>\n                                <Heading fontSize=\"lg\">\n                                    <FormattedMessage defaultMessage=\"Payment Details\" />\n                                </Heading>\n\n                                <SimpleGrid columns={[1, 1, 2]} spacing={6}>\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage defaultMessage=\"Billing Address\" />\n                                        </Heading>\n                                        <AddressDisplay address={order.billingAddress} />\n                                    </Stack>\n\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage defaultMessage=\"Credit Card\" />\n                                        </Heading>\n\n                                        <Stack direction=\"row\">\n                                            {CardIcon && <CardIcon layerStyle=\"ccIcon\" />}\n\n                                            <Box>\n                                                <Text>\n                                                    {\n                                                        order.paymentInstruments[0].paymentCard\n                                                            ?.cardType\n                                                    }\n                                                </Text>\n                                                <Stack direction=\"row\">\n                                                    <Text>\n                                                        &bull;&bull;&bull;&bull;{' '}\n                                                        {\n                                                            order.paymentInstruments[0].paymentCard\n                                                                ?.numberLastDigits\n                                                        }\n                                                    </Text>\n                                                    <Text>\n                                                        {\n                                                            order.paymentInstruments[0].paymentCard\n                                                                ?.expirationMonth\n                                                        }\n                                                        /\n                                                        {\n                                                            order.paymentInstruments[0].paymentCard\n                                                                ?.expirationYear\n                                                        }\n                                                    </Text>\n                                                </Stack>\n                                            </Box>\n                                        </Stack>\n                                    </Stack>\n                                </SimpleGrid>\n                            </Stack>\n                        </Container>\n                    </Box>\n                </Stack>\n            </Container>\n        </Box>\n    )\n}\n\nexport default CheckoutConfirmation\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport {AmexIcon, DiscoverIcon, MastercardIcon, VisaIcon} from '../components/icons'\n\n/**\n * Formats a credit card number against given criteria\n * @param {string} cardNumber - The number to be formatted\n * @param {Object} opts\n * @param {number[]} opts.gaps - Indices for space insertion\n * @param {number[]} opts.length - Max number lengths for output\n * @returns {string} Formatted card number for display\n */\nexport const formatCreditCardNumber = (cardNumber = '', opts = {gaps: [], lengths: []}) => {\n    let trimmedNumber = cardNumber.replace(/[^0-9]/g, '')\n    let numberLength = trimmedNumber.length\n\n    if (numberLength === opts.lengths[0] + 1) {\n        trimmedNumber = trimmedNumber.substr(0, opts.lengths[0])\n        numberLength = trimmedNumber.length\n    }\n\n    let numbers = trimmedNumber.split('')\n\n    opts.gaps.forEach((gapIndex, idx) => {\n        if (numberLength > gapIndex) {\n            numbers.splice(gapIndex + idx, 0, ' ')\n        }\n    })\n\n    return numbers.join('')\n}\n\n/**\n * Returns the icon component for a given card type\n * @param {string} type - The card type\n * @returns {Function|undefined} React component\n */\nexport const getCreditCardIcon = (type) => {\n    if (!type) {\n        return undefined\n    }\n    return {\n        // Visa\n        visa: VisaIcon,\n\n        // MasterCard\n        mastercard: MastercardIcon,\n        'master card': MastercardIcon,\n\n        // American Express\n        'american express': AmexIcon,\n        'american-express': AmexIcon,\n        amex: AmexIcon,\n\n        // Discover\n        discover: DiscoverIcon\n    }[type.toLowerCase()]\n}\n\n/**\n * Returns the card type string in the format the SDK expects.\n * @param {string} - The card type as given by our cc validator\n * @returns {string|undefined} - The card type in a format expected by the SDK\n */\nexport const getPaymentInstrumentCardType = (type) => {\n    if (!type) {\n        return undefined\n    }\n    return {\n        visa: 'Visa',\n        mastercard: 'Master Card',\n        'american-express': 'Amex',\n        discover: 'Discover'\n    }[type]\n}\n\nexport const createCreditCardPaymentBodyFromForm = (paymentFormData) => {\n    // eslint-disable-next-line no-unused-vars\n    const {expiry, paymentInstrumentId, ...selectedPayment} = paymentFormData\n\n    // The form gives us the expiration date as `MM/YY` - so we need to split it into\n    // month and year to submit them as individual fields.\n    const [expirationMonth, expirationYear] = expiry.split('/')\n\n    return {\n        paymentMethodId: 'CREDIT_CARD',\n        paymentCard: {\n            ...selectedPayment,\n            number: selectedPayment.number.replace(/ /g, ''),\n            cardType: getPaymentInstrumentCardType(selectedPayment.cardType),\n            expirationMonth: parseInt(expirationMonth),\n            expirationYear: parseInt(`20${expirationYear}`),\n\n            // TODO: These fields are required for saving the card to the customer's\n            // account. Im not sure what they are for or how to get them, so for now\n            // we're just passing some values to make it work. Need to investigate.\n            issueNumber: '',\n            validFromMonth: 1,\n            validFromYear: 2020\n        }\n    }\n}\n"],"names":["React","PropTypes","Box","Text","AddressDisplay","address","firstName","lastName","address1","city","stateCode","postalCode","countryCode","propTypes","object","Stack","useRegistrationFields","PasswordRequirements","Field","PostCheckoutRegistrationFields","form","prefix","fields","password","watch","email","isRequired","string","useEffect","useState","Fragment","FormattedMessage","FormattedNumber","Button","Container","Flex","Heading","SimpleGrid","Spacer","Alert","AlertIcon","Divider","useForm","getCreditCardIcon","useBasket","useCustomer","useNavigation","Link","PromoPopover","ItemVariantProvider","CartItemVariantImage","CartItemVariantName","CartItemVariantAttributes","CartItemVariantPrice","CheckoutConfirmation","navigate","basket","customer","order","defaultValues","customerInfo","billingAddress","_type","orderNo","CardIcon","paymentInstruments","paymentCard","cardType","submitForm","data","registerCustomer","error","existingAccountMessage","message","test","setError","type","base","md","b","chunks","isGuest","handleSubmit","errors","global","clearErrors","formState","isSubmitting","shipments","shippingAddress","shippingMethod","name","description","itemCount","productItems","reduce","a","quantity","map","product","idx","variant","_productItemsDetail","productId","price","currency","productSubTotal","orderPriceAdjustments","adjustment","priceAdjustmentId","itemText","shippingItems","priceAdjustments","length","some","appliedDiscount","shippingTotal","taxTotal","orderTotal","numberLastDigits","expirationMonth","expirationYear","AmexIcon","DiscoverIcon","MastercardIcon","VisaIcon","formatCreditCardNumber","cardNumber","opts","gaps","lengths","trimmedNumber","replace","numberLength","substr","numbers","split","forEach","gapIndex","splice","join","undefined","visa","mastercard","amex","discover","toLowerCase","getPaymentInstrumentCardType","createCreditCardPaymentBodyFromForm","paymentFormData","expiry","paymentInstrumentId","selectedPayment","paymentMethodId","number","parseInt","issueNumber","validFromMonth","validFromYear"],"sourceRoot":""}