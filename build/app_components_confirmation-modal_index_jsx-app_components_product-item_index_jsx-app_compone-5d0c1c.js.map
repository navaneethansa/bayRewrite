{"version":3,"file":"app_components_confirmation-modal_index_jsx-app_components_product-item_index_jsx-app_compone-5d0c1c.js","mappings":"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","sources":["webpack://bay-rewrite/./app/components/confirmation-modal/index.jsx","webpack://bay-rewrite/./app/components/product-item/index.jsx","webpack://bay-rewrite/./app/components/product-view-modal/index.jsx","webpack://bay-rewrite/./app/hooks/use-product-view-modal.js"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport {noop} from '../../utils/utils'\nimport {\n    Button,\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogContent,\n    AlertDialogOverlay,\n    Text\n} from '@chakra-ui/react'\n\nimport PropTypes from 'prop-types'\nimport {CONFIRMATION_DIALOG_DEFAULT_CONFIG} from '../../pages/account/constant'\nimport {useIntl} from 'react-intl'\n\nconst ConfirmationModal = ({\n    dialogTitle = CONFIRMATION_DIALOG_DEFAULT_CONFIG.dialogTitle,\n    confirmationMessage = CONFIRMATION_DIALOG_DEFAULT_CONFIG.confirmationMessage,\n    primaryActionLabel = CONFIRMATION_DIALOG_DEFAULT_CONFIG.primaryActionLabel,\n    alternateActionLabel = CONFIRMATION_DIALOG_DEFAULT_CONFIG.alternateActionLabel,\n    onPrimaryAction = noop,\n    onAlternateAction = noop,\n    ...props\n}) => {\n    const {formatMessage} = useIntl()\n\n    const handleConfirmClick = () => {\n        onPrimaryAction()\n        props.onClose()\n    }\n\n    const handleAlternateActionClick = () => {\n        onAlternateAction()\n        props.onClose()\n    }\n\n    return (\n        <AlertDialog\n            isOpen={props.isOpen}\n            isCentered\n            onClose={handleAlternateActionClick}\n            {...props}\n        >\n            <AlertDialogOverlay />\n            <AlertDialogContent>\n                <AlertDialogHeader>{formatMessage(dialogTitle)}</AlertDialogHeader>\n                <AlertDialogBody>\n                    <Text>{formatMessage(confirmationMessage)}</Text>\n                </AlertDialogBody>\n\n                <AlertDialogFooter>\n                    <Button variant=\"ghost\" mr={3} onClick={handleAlternateActionClick}>\n                        {formatMessage(alternateActionLabel)}\n                    </Button>\n                    <Button variant=\"solid\" onClick={handleConfirmClick}>\n                        {formatMessage(primaryActionLabel)}\n                    </Button>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    )\n}\n\nConfirmationModal.propTypes = {\n    /**\n     * Prop to check if modal is open\n     */\n    isOpen: PropTypes.bool.isRequired,\n    /**\n     * Callback invoked to open the modal\n     */\n    onOpen: PropTypes.func.isRequired,\n    /**\n     * Callback invoked to close the modal\n     */\n    onClose: PropTypes.func.isRequired,\n    /**\n     * Text to be displayed as modal header\n     */\n    dialogTitle: PropTypes.object,\n    /**\n     * Text to display in confirmation modal prompting user to pick an action\n     */\n    confirmationMessage: PropTypes.object,\n    /**\n     * Button Label for primary action in confirmation modal\n     */\n    primaryActionLabel: PropTypes.object,\n    /**\n     * Button Label for alternate or secondary action in confirmation modal\n     */\n    alternateActionLabel: PropTypes.object,\n    /**\n     * Action to execute if user selects primary action\n     */\n    onPrimaryAction: PropTypes.func,\n    /**\n     * Action to execute if user selects alternate or secondary action\n     */\n    onAlternateAction: PropTypes.func\n}\n\nexport default ConfirmationModal\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {FormattedMessage} from 'react-intl'\n\n// Chakra Components\nimport {Box, Fade, Flex, Stack, Text} from '@chakra-ui/react'\n\n// Project Components\nimport {HideOnDesktop, HideOnMobile} from '../responsive'\nimport ItemVariantProvider from '../item-variant'\nimport CartItemVariantImage from '../item-variant/item-image'\nimport CartItemVariantName from '../item-variant/item-name'\nimport CartItemVariantAttributes from '../item-variant/item-attributes'\nimport CartItemVariantPrice from '../item-variant/item-price'\nimport LoadingSpinner from '../loading-spinner'\nimport QuantityPicker from '../quantity-picker'\n\n// Utilities\nimport {noop} from '../../utils/utils'\n\n// Hooks\nimport {useProduct} from '../../hooks'\n\n/**\n * Component representing a product item usually in a list with details about the product - name, variant, pricing, etc.\n * @param {Object} product Product to be represented in the list item.\n * @param {node} primaryAction Child component representing the most prominent action to be performed by the user.\n * @param {node} secondaryActions Child component representing the other actions relevant to the product to be performed by the user.\n * @param {func} onItemQuantityChange callback function to be invoked whenever item quantity changes.\n * @param {boolean} showLoading Renders a loading spinner with overlay if set to true.\n * @returns A JSX element representing product item in a list (eg: wishlist, cart, etc).\n */\nconst ProductItem = ({\n    product,\n    primaryAction,\n    secondaryActions,\n    onItemQuantityChange = noop,\n    showLoading = false\n}) => {\n    const {\n        stepQuantity,\n        showInventoryMessage,\n        inventoryMessage,\n        quantity,\n        setQuantity\n    } = useProduct(product)\n\n    return (\n        <Box position=\"relative\" data-testid={`sf-cart-item-${product.productId}`}>\n            <ItemVariantProvider variant={product}>\n                {showLoading && <LoadingSpinner />}\n                <Stack layerStyle=\"cardBordered\" align=\"flex-start\">\n                    <Flex width=\"full\" alignItems=\"flex-start\" backgroundColor=\"white\">\n                        <CartItemVariantImage width={['88px', '136px']} mr={4} />\n                        <Stack spacing={3} flex={1}>\n                            <Stack spacing={1}>\n                                <CartItemVariantName />\n                                <CartItemVariantAttributes />\n                                <HideOnDesktop>\n                                    <Box marginTop={2}>\n                                        <CartItemVariantPrice align=\"left\" />\n                                    </Box>\n                                </HideOnDesktop>\n                            </Stack>\n\n                            <Flex align=\"flex-end\" justify=\"space-between\">\n                                <Stack spacing={1}>\n                                    <Text fontSize=\"sm\" color=\"gray.700\">\n                                        <FormattedMessage defaultMessage=\"Quantity:\" />\n                                    </Text>\n                                    <QuantityPicker\n                                        step={stepQuantity}\n                                        value={quantity}\n                                        min={0}\n                                        clampValueOnBlur={false}\n                                        onBlur={(e) => {\n                                            // Default to last known quantity if a user leaves the box with an invalid value\n                                            const {value} = e.target\n\n                                            if (!value) {\n                                                setQuantity(product.quantity)\n                                            }\n                                        }}\n                                        onChange={(stringValue, numberValue) => {\n                                            // Set the Quantity of product to value of input if value number\n                                            if (numberValue >= 0) {\n                                                // Call handler\n                                                onItemQuantityChange(numberValue).then(\n                                                    (isValidChange) =>\n                                                        isValidChange && setQuantity(numberValue)\n                                                )\n                                            } else if (stringValue === '') {\n                                                // We want to allow the use to clear the input to start a new input so here we set the quantity to '' so NAN is not displayed\n                                                // User will not be able to add '' qauntity to the cart due to the add to cart button enablement rules\n                                                setQuantity(stringValue)\n                                            }\n                                        }}\n                                    />\n                                </Stack>\n                                <Stack>\n                                    <HideOnMobile>\n                                        <CartItemVariantPrice />\n                                    </HideOnMobile>\n                                    <Box display={['none', 'block', 'block', 'block']}>\n                                        {primaryAction}\n                                    </Box>\n                                </Stack>\n                            </Flex>\n\n                            <Box>\n                                {product && showInventoryMessage && (\n                                    <Fade in={true}>\n                                        <Text color=\"orange.600\" fontWeight={600}>\n                                            {inventoryMessage}\n                                        </Text>\n                                    </Fade>\n                                )}\n                            </Box>\n\n                            {secondaryActions}\n                        </Stack>\n                    </Flex>\n\n                    <Box display={['block', 'none', 'none', 'none']} w={'full'}>\n                        {primaryAction}\n                    </Box>\n                </Stack>\n            </ItemVariantProvider>\n        </Box>\n    )\n}\n\nProductItem.propTypes = {\n    product: PropTypes.object,\n    onItemQuantityChange: PropTypes.func,\n    onAddItemToCart: PropTypes.func,\n    showLoading: PropTypes.bool,\n    isWishlistItem: PropTypes.bool,\n    primaryAction: PropTypes.node,\n    secondaryActions: PropTypes.node\n}\n\nexport default ProductItem\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Modal, ModalBody, ModalCloseButton, ModalContent, ModalOverlay} from '@chakra-ui/react'\nimport ProductView from '../../partials/product-view'\nimport {useProductViewModal} from '../../hooks/use-product-view-modal'\n\n/**\n * A Modal that contains Product View\n */\nconst ProductViewModal = ({product, isOpen, onClose, ...props}) => {\n    const productViewModalData = useProductViewModal(product)\n    return (\n        <Modal data-testid={'sf-product-view-modal'} size=\"4xl\" isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalCloseButton />\n                <ModalBody pb={8} bg=\"white\" paddingBottom={6} marginTop={6}>\n                    <ProductView\n                        showFullLink={true}\n                        imageSize=\"sm\"\n                        product={productViewModalData.product}\n                        isLoading={productViewModalData.isFetching}\n                        {...props}\n                    />\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nProductViewModal.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onOpen: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    product: PropTypes.object,\n    isLoading: PropTypes.bool,\n    actionButtons: PropTypes.node,\n    onModalClose: PropTypes.func\n}\n\nexport default ProductViewModal\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport {useEffect, useState} from 'react'\nimport {rebuildPathWithParams, removeQueryParamsFromPath} from '../utils/url'\nimport {useHistory, useLocation} from 'react-router-dom'\nimport {useCommerceAPI} from '../commerce-api/contexts'\nimport {isError} from '../commerce-api/utils'\nimport {useVariant} from './use-variant'\nimport {useToast} from './use-toast'\nimport {useIntl} from 'react-intl'\nimport {API_ERROR_MESSAGE} from '../constants'\n\n/**\n * This hooks is responsible for fetching a product detail based on the variation selection\n * and managing the variation params on the url when the modal is open/close\n * @param initialProduct - the initial product when the modal is first open\n * @returns object\n */\nexport const useProductViewModal = (initialProduct) => {\n    const location = useLocation()\n    const api = useCommerceAPI()\n    const history = useHistory()\n    const intl = useIntl()\n    const [product, setProduct] = useState(initialProduct)\n    const [isFetching, setIsFetching] = useState(false)\n    const toast = useToast()\n    const variant = useVariant(product)\n    const cleanUpVariantParams = () => {\n        const paramToRemove = [...product.variationAttributes.map(({id}) => id), 'pid']\n        const updatedParams = removeQueryParamsFromPath(`${location.search}`, paramToRemove)\n\n        history.replace({search: updatedParams})\n    }\n\n    useEffect(() => {\n        // when the modal is first mounted,\n        // clean up the params in case there are variant params not related to current product\n        cleanUpVariantParams()\n        return () => {\n            cleanUpVariantParams()\n        }\n    }, [])\n\n    useEffect(() => {\n        // getting product detail based on variant selection for stockLevel\n        const getProductDetailByVariant = async () => {\n            // Fetch the product detail when the user select different variant\n            if (variant && variant.productId !== product?.id) {\n                setIsFetching(true)\n                const res = await api.shopperProducts.getProduct({\n                    parameters: {\n                        id: variant.productId,\n                        allImages: true\n                    }\n                })\n                if (isError(res)) {\n                    setIsFetching(false)\n                    toast({\n                        title: intl.formatMessage(\n                            {defaultMessage: '{errorMessage}'},\n                            {errorMessage: API_ERROR_MESSAGE}\n                        ),\n                        status: 'error'\n                    })\n                    throw new Error(res)\n                }\n                setProduct(res)\n                setIsFetching(false)\n            }\n        }\n        if (variant) {\n            const {variationValues} = variant\n            // update the url with the new product id and variation values when the variant changes\n            const updatedUrl = rebuildPathWithParams(`${location.pathname}${location.search}`, {\n                ...variationValues,\n                pid: variant.productId\n            })\n            history.replace(updatedUrl)\n        }\n        getProductDetailByVariant()\n    }, [variant])\n\n    return {\n        product,\n        variant,\n        isFetching\n    }\n}\n"],"names":["React","noop","Button","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","Text","PropTypes","CONFIRMATION_DIALOG_DEFAULT_CONFIG","useIntl","ConfirmationModal","dialogTitle","confirmationMessage","primaryActionLabel","alternateActionLabel","onPrimaryAction","onAlternateAction","props","formatMessage","handleConfirmClick","onClose","handleAlternateActionClick","isOpen","propTypes","bool","isRequired","onOpen","func","object","FormattedMessage","Box","Fade","Flex","Stack","HideOnDesktop","HideOnMobile","ItemVariantProvider","CartItemVariantImage","CartItemVariantName","CartItemVariantAttributes","CartItemVariantPrice","LoadingSpinner","QuantityPicker","useProduct","ProductItem","product","primaryAction","secondaryActions","onItemQuantityChange","showLoading","stepQuantity","showInventoryMessage","inventoryMessage","quantity","setQuantity","productId","e","value","target","stringValue","numberValue","then","isValidChange","onAddItemToCart","isWishlistItem","node","Modal","ModalBody","ModalCloseButton","ModalContent","ModalOverlay","ProductView","useProductViewModal","ProductViewModal","productViewModalData","isFetching","isLoading","actionButtons","onModalClose","useEffect","useState","rebuildPathWithParams","removeQueryParamsFromPath","useHistory","useLocation","useCommerceAPI","isError","useVariant","useToast","API_ERROR_MESSAGE","initialProduct","location","api","history","intl","setProduct","setIsFetching","toast","variant","cleanUpVariantParams","paramToRemove","variationAttributes","map","id","updatedParams","search","replace","getProductDetailByVariant","res","shopperProducts","getProduct","parameters","allImages","title","defaultMessage","errorMessage","status","Error","variationValues","updatedUrl","pathname","pid"],"sourceRoot":""}