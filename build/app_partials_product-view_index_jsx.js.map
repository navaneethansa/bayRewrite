{"version":3,"file":"app_partials_product-view_index_jsx.js","mappings":"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","sources":["webpack://bay-rewrite/./app/components/breadcrumb/index.jsx","webpack://bay-rewrite/./app/components/image-gallery/index.jsx","webpack://bay-rewrite/./app/components/quantity-picker/index.jsx","webpack://bay-rewrite/./app/components/swatch-group/index.jsx","webpack://bay-rewrite/./app/components/swatch-group/swatch.jsx","webpack://bay-rewrite/./app/partials/product-view/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link as RouteLink} from 'react-router-dom'\nimport {useIntl} from 'react-intl'\n\n// Components\nimport {\n    Breadcrumb as ChakraBreadcrumb,\n    BreadcrumbItem as ChakraBreadcrumbItem,\n    BreadcrumbLink as ChakraBreadcrumbLink,\n    // Hooks\n    useStyleConfig\n} from '@chakra-ui/react'\n\n// Icons\nimport {ChevronRightIcon} from '../icons'\n\n// Others\nimport {categoryUrlBuilder} from '../../utils/url'\n\n/**\n * A simplification of the Chakra `Breadcrumb` component for our project needs. Given\n * a list of categories, display a breadcrumb and it's items.\n */\nconst Breadcrumb = ({categories, ...rest}) => {\n    const intl = useIntl()\n    const styles = useStyleConfig('Breadcrumb')\n\n    return (\n        <ChakraBreadcrumb\n            className=\"sf-breadcrumb\"\n            {...styles.container}\n            separator={<ChevronRightIcon {...styles.icon} />}\n            {...rest}\n        >\n            {categories.map((category) => (\n                <ChakraBreadcrumbItem key={category.id} data-testid=\"sf-crumb-item\">\n                    <ChakraBreadcrumbLink\n                        as={RouteLink}\n                        to={categoryUrlBuilder(category, intl.locale)}\n                        {...styles.link}\n                    >\n                        {category.name}\n                    </ChakraBreadcrumbLink>\n                </ChakraBreadcrumbItem>\n            ))}\n        </ChakraBreadcrumb>\n    )\n}\n\nBreadcrumb.displayName = 'Breadcrumb'\n\nBreadcrumb.propTypes = {\n    /**\n     * The categories to be displayed in this breadcrumb.\n     */\n    categories: PropTypes.array\n}\n\nexport default Breadcrumb\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useState, useMemo, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useLocation} from 'react-router-dom'\n\n// Chakra Components\nimport {\n    AspectRatio,\n    Box,\n    Img,\n    Flex,\n\n    // Hooks\n    Skeleton as ChakraSkeleton,\n    ListItem,\n    List,\n    useMultiStyleConfig\n} from '@chakra-ui/react'\nimport {findImageGroupBy} from '../../utils/image-groups-utils'\n\nconst EnterKeyNumber = 13\n\nconst LARGE = 'large'\nconst SMALL = 'small'\n\n/**\n * The skeleton representation of the image gallery component. Use this component while\n * you are waiting for product data to be returnd from the server.\n */\nexport const Skeleton = ({size}) => {\n    const styles = useMultiStyleConfig('ImageGallery', {size})\n\n    return (\n        <Box data-testid=\"sf-image-gallery-skeleton\">\n            <Flex flexDirection=\"column\">\n                <AspectRatio ratio={1} {...styles.heroImageSkeleton}>\n                    <ChakraSkeleton />\n                </AspectRatio>\n                <Flex>\n                    {new Array(4).fill(0).map((_, index) => (\n                        <AspectRatio ratio={1} {...styles.thumbnailImageSkeleton} key={index}>\n                            <ChakraSkeleton />\n                        </AspectRatio>\n                    ))}\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n\nSkeleton.propTypes = {\n    size: PropTypes.bool\n}\n\n/**\n * The image gallery displays a hero image and thumbnails below it. You can control which\n * image groups that are use by passing in the current selected variation values.\n */\nconst ImageGallery = ({imageGroups = [], selectedVariationAttributes = {}, size}) => {\n    const [selectedIndex, setSelectedIndex] = useState(0)\n    const styles = useMultiStyleConfig('ImageGallery', {size})\n    const location = useLocation()\n\n    // Get the 'hero' image for the current variation.\n    const heroImageGroup = useMemo(\n        () =>\n            findImageGroupBy(imageGroups, {\n                viewType: LARGE,\n                selectedVariationAttributes\n            }),\n        [selectedVariationAttributes]\n    )\n\n    useEffect(() => {\n        // reset the selected index when location search changes\n        setSelectedIndex(0)\n    }, [location.search])\n\n    // Get a memoized image group used for the thumbnails. We use the `useMemo` hook\n    // so we don't have to waste time filtering the image groups each render if the\n    // selected variation attributes haven't changed.\n    const thumbnailImageGroup = useMemo(\n        () =>\n            findImageGroupBy(imageGroups, {\n                viewType: SMALL,\n                selectedVariationAttributes\n            }),\n        [selectedVariationAttributes]\n    )\n\n    const heroImage = heroImageGroup?.images?.[selectedIndex]\n    const thumbnailImages = thumbnailImageGroup?.images || []\n    return (\n        <Flex direction=\"column\">\n            {heroImage && (\n                <Box {...styles.heroImageGroup}>\n                    <AspectRatio {...styles.heroImage} ratio={1}>\n                        <Img alt={heroImage.alt} src={heroImage.disBaseLink} />\n                    </AspectRatio>\n                </Box>\n            )}\n\n            <List display={'flex'} flexWrap={'wrap'}>\n                {thumbnailImages.map((image, index) => {\n                    const selected = index === selectedIndex\n                    return (\n                        <ListItem\n                            {...styles.thumbnailImageItem}\n                            tabIndex={0}\n                            key={index}\n                            data-testid=\"image-gallery-thumbnails\"\n                            onKeyDown={(e) => {\n                                if (e.keyCode === EnterKeyNumber) {\n                                    return setSelectedIndex(index)\n                                }\n                            }}\n                            onClick={() => setSelectedIndex(index)}\n                            borderColor={`${selected ? 'black' : ''}`}\n                            borderWidth={`${selected ? '1px' : 0}`}\n                        >\n                            <AspectRatio ratio={1}>\n                                <Img alt={image.alt} src={image.disBaseLink} />\n                            </AspectRatio>\n                        </ListItem>\n                    )\n                })}\n            </List>\n        </Flex>\n    )\n}\n\nImageGallery.propTypes = {\n    /**\n     * The images array to be rendered\n     */\n    imageGroups: PropTypes.array,\n    /**\n     * The current selected variation values\n     */\n    selectedVariationAttributes: PropTypes.object,\n    /**\n     * Size of the Image gallery, this will be used to determined the max width from styles\n     */\n    size: PropTypes.string\n}\n\nexport default ImageGallery\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {Button, HStack, Input, useNumberInput} from '@chakra-ui/react'\n\n/**\n * This is the mobile implementation of the Chakra NumberInput. This simple component essentially\n * is a helper so we don't have to reuse the hooks every time we need a number input since design dictates\n * we use the moobile variation on all screens.\n *\n * NOTE: We can optionally put global logic we see if in here, and various styling decisions in this single\n * component.\n *\n * @param {*} props\n * @returns\n */\nconst QuantityPicker = (props) => {\n    const {getInputProps, getIncrementButtonProps, getDecrementButtonProps} = useNumberInput({\n        ...props,\n        // Defaults\n        focusInputOnChange: false,\n        onFocus: (e) => {\n            // eslint-disable-next-line react/prop-types\n            const {onFocus} = props\n\n            // This is useful for mobile devices, this allows the user to pop open the keyboard and set the\n            // new quantity with one click.\n            e.target.select()\n\n            // If there is a `onFocus` property define, call it with the event captured.\n            // eslint-disable-next-line react/prop-types\n            onFocus && onFocus.call(this, e)\n        }\n    })\n\n    const inc = getIncrementButtonProps({variant: 'outline'})\n    const dec = getDecrementButtonProps({variant: 'outline'})\n    const input = getInputProps({maxWidth: '44px', textAlign: 'center'})\n\n    return (\n        <HStack>\n            <Button data-testid=\"quantity-decrement\" {...dec}>\n                -\n            </Button>\n            <Input {...input} />\n            <Button data-testid=\"quantity-increment\" {...inc}>\n                +\n            </Button>\n        </HStack>\n    )\n}\n\nexport default QuantityPicker\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Flex, Box, HStack, useStyleConfig} from '@chakra-ui/react'\nimport {noop} from '../../utils/utils'\n\n/**\n * SwatchGroup allows you to create a list of swatches\n * Each Swatch is a link with will direct to a href passed to them\n */\nconst SwatchGroup = (props) => {\n    const {displayName, children, value, label = '', variant = 'square', onChange = noop} = props\n    const styles = useStyleConfig('SwatchGroup')\n    return (\n        <Flex {...styles.swatchGroup} role=\"radiogroup\">\n            <HStack {...styles.swatchLabel}>\n                <Box fontWeight=\"semibold\">{`${label}:`}</Box>\n                <Box>{displayName}</Box>\n            </HStack>\n            <Flex {...styles.swatchesWrapper}>\n                {React.Children.map(children, (child) => {\n                    const childValue = child.props.value\n\n                    return React.cloneElement(child, {\n                        selected: childValue === value,\n                        key: childValue,\n                        value,\n                        variant,\n                        onChange\n                    })\n                })}\n            </Flex>\n        </Flex>\n    )\n}\n\nSwatchGroup.displayName = 'SwatchGroup'\n\nSwatchGroup.propTypes = {\n    /**\n     * The attribute name of the swatch group. E.g color, size\n     */\n    label: PropTypes.string,\n    /**\n     * The selected Swatch value.\n     */\n    value: PropTypes.string,\n    /**\n     * The display value of the selected option\n     */\n    displayName: PropTypes.string,\n    /**\n     * The Swatch options to choose between\n     */\n    children: PropTypes.array,\n    /**\n     * The shape of the swatches\n     */\n    variant: PropTypes.oneOf(['square', 'circle']),\n    /**\n     * This function is called when a new option is selected\n     */\n    onChange: PropTypes.func\n}\n\nexport default SwatchGroup\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Box, Center, useMultiStyleConfig} from '@chakra-ui/react'\nimport {Link as RouteLink} from 'react-router-dom'\n\n/**\n * The Swatch Component displays item inside `SwatchGroup`\n */\nconst Swatch = (props) => {\n    const {\n        disabled,\n        selected,\n        label,\n        children,\n        href,\n        variant = 'square',\n        onChange,\n        value,\n        name\n    } = props\n    const styles = useMultiStyleConfig('SwatchGroup', {variant, disabled, selected})\n    return (\n        <Button\n            {...styles.swatch}\n            as={RouteLink}\n            to={href}\n            aria-label={name}\n            onClick={(e) => {\n                e.preventDefault()\n                onChange(value, href)\n            }}\n            aria-checked={selected}\n            variant=\"outline\"\n        >\n            <Center {...styles.swatchButton}>\n                {children}\n                {label && <Box>{label}</Box>}\n            </Center>\n        </Button>\n    )\n}\n\nSwatch.displayName = 'Swatch'\n\nSwatch.propTypes = {\n    /**\n     * The children to be rendered within swatch item.\n     */\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n    /**\n     * Indicates whether the option is disabled\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Indicates whether the option is selected.\n     * This props is provided internally by SwatchGroup\n     */\n    selected: PropTypes.bool,\n    /**\n     * The shape of the Swatch\n     */\n    variant: PropTypes.oneOf(['square', 'circle']),\n    /**\n     * The label of the option.\n     */\n    label: PropTypes.string,\n    /**\n     *  The url of this option\n     */\n    href: PropTypes.string,\n    /**\n     * This function is called whenever the user selects an option.\n     * It is passed the new value.\n     */\n    onChange: PropTypes.func,\n    /**\n     * The value for the option.\n     */\n    value: PropTypes.string,\n    /**\n     * The display value for each swatch\n     */\n    name: PropTypes.string\n}\n\nexport default Swatch\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useHistory, useLocation} from 'react-router-dom'\nimport {useIntl} from 'react-intl'\n\nimport {Flex, Heading, Button, Skeleton, Box, Text, VStack, Fade, useTheme} from '@chakra-ui/react'\nimport {useProduct} from '../../hooks'\nimport {useAddToCartModalContext} from '../../hooks/use-add-to-cart-modal'\n\n// project components\nimport SwatchGroup from '../../components/swatch-group'\nimport Swatch from '../../components/swatch-group/swatch'\nimport ImageGallery from '../../components/image-gallery'\nimport Breadcrumb from '../../components/breadcrumb'\nimport Link from '../../components/link'\nimport withRegistration from '../../hoc/with-registration'\nimport {useCurrency} from '../../hooks'\nimport {Skeleton as ImageGallerySkeleton} from '../../components/image-gallery'\nimport {HideOnDesktop, HideOnMobile} from '../../components/responsive'\nimport QuantityPicker from '../../components/quantity-picker'\n\nconst ProductViewHeader = ({name, price, currency, category}) => {\n    const intl = useIntl()\n    const {currency: activeCurrency} = useCurrency()\n    return (\n        <VStack mr={4} spacing={2} align=\"flex-start\" marginBottom={[4, 4, 4, 0, 0]}>\n            {category && (\n                <Skeleton isLoaded={category} width={64}>\n                    <Breadcrumb categories={category} />\n                </Skeleton>\n            )}\n\n            {/* Title */}\n            <Skeleton isLoaded={name}>\n                <Heading fontSize=\"2xl\">{`${name}`}</Heading>\n            </Skeleton>\n\n            {/* Price */}\n            <Skeleton isLoaded={price} width={32}>\n                <Text fontWeight=\"bold\" fontSize=\"md\" aria-label=\"price\">\n                    {intl.formatNumber(price, {\n                        style: 'currency',\n                        currency: currency || activeCurrency\n                    })}\n                </Text>\n            </Skeleton>\n        </VStack>\n    )\n}\n\nProductViewHeader.propTypes = {\n    name: PropTypes.string,\n    price: PropTypes.number,\n    currency: PropTypes.string,\n    category: PropTypes.array\n}\n\nconst ButtonWithRegistration = withRegistration(Button)\n\n/**\n * Render a product detail view that includes name, image gallery, price,\n * variant selections, action buttons\n */\nconst ProductView = ({\n    product,\n    category,\n    showFullLink = false,\n    imageSize = 'md',\n    isWishlistLoading = false,\n    addToCart,\n    updateCart,\n    addToWishlist,\n    updateWishlist,\n    isProductLoading\n}) => {\n    const intl = useIntl()\n    const history = useHistory()\n    const location = useLocation()\n    const {\n        isOpen: isAddToCartModalOpen,\n        onOpen: onAddToCartModalOpen,\n        onClose: onAddToCartModalClose\n    } = useAddToCartModalContext()\n    const theme = useTheme()\n\n    const {\n        showLoading,\n        showInventoryMessage,\n        inventoryMessage,\n        quantity,\n        minOrderQuantity,\n        setQuantity,\n        variant,\n        variationParams,\n        variationAttributes,\n        stockLevel,\n        stepQuantity\n    } = useProduct(product)\n    const canAddToWishlist = !isProductLoading\n    const canOrder =\n        !isProductLoading &&\n        variant?.orderable &&\n        parseInt(quantity) > 0 &&\n        parseInt(quantity) <= stockLevel\n\n    const renderActionButtons = () => {\n        const buttons = []\n\n        const handleCartItem = async () => {\n            if (!addToCart && !updateCart) return null\n            if (updateCart) {\n                await updateCart(variant, quantity)\n                return\n            }\n            await addToCart(variant, quantity)\n            onAddToCartModalOpen({product, quantity})\n        }\n\n        const handleWishlistItem = async () => {\n            if (!updateWishlist && !addToWishlist) return null\n            if (updateWishlist) {\n                updateWishlist(variant, quantity)\n                return\n            }\n            addToWishlist(variant, quantity)\n        }\n\n        if (addToCart || updateCart) {\n            buttons.push(\n                <Button\n                    key=\"cart-button\"\n                    onClick={handleCartItem}\n                    disabled={!canOrder}\n                    width=\"100%\"\n                    variant=\"solid\"\n                    marginBottom={4}\n                >\n                    {updateCart\n                        ? intl.formatMessage({defaultMessage: 'Update'})\n                        : intl.formatMessage({defaultMessage: 'Add to cart'})}\n                </Button>\n            )\n        }\n\n        if (addToWishlist || updateWishlist) {\n            buttons.push(\n                <ButtonWithRegistration\n                    key=\"wishlist-button\"\n                    onClick={handleWishlistItem}\n                    disabled={isWishlistLoading || !canAddToWishlist}\n                    isLoading={isWishlistLoading}\n                    width=\"100%\"\n                    variant=\"outline\"\n                    marginBottom={4}\n                >\n                    {updateWishlist\n                        ? intl.formatMessage({defaultMessage: 'Update'})\n                        : intl.formatMessage({defaultMessage: 'Add to wishlist'})}\n                </ButtonWithRegistration>\n            )\n        }\n\n        return buttons\n    }\n\n    useEffect(() => {\n        if (isAddToCartModalOpen) {\n            onAddToCartModalClose()\n        }\n    }, [location.pathname])\n\n    return (\n        <Flex direction={'column'} data-testid=\"product-view\">\n            {/* Basic information etc. title, price, breadcrumb*/}\n            <Box display={['block', 'block', 'block', 'none']}>\n                <ProductViewHeader\n                    name={product?.name}\n                    price={product?.price}\n                    currency={product?.currency}\n                    category={category}\n                />\n            </Box>\n            <Flex direction={['column', 'column', 'column', 'row']}>\n                <Box flex={1} mr={[0, 0, 0, 6, 6]}>\n                    {product ? (\n                        <>\n                            <ImageGallery\n                                size={imageSize}\n                                imageGroups={product.imageGroups}\n                                selectedVariationAttributes={variationParams}\n                            />\n                            <HideOnMobile>\n                                {showFullLink && product && (\n                                    <Link to={`/product/${product.master.masterId}`}>\n                                        <Text color=\"blue.600\">\n                                            {intl.formatMessage({\n                                                defaultMessage: 'See full details'\n                                            })}\n                                        </Text>\n                                    </Link>\n                                )}\n                            </HideOnMobile>\n                        </>\n                    ) : (\n                        <ImageGallerySkeleton />\n                    )}\n                </Box>\n\n                {/* Variations & Quantity Selector */}\n                <VStack align=\"stretch\" spacing={8} flex={1} marginBottom={[16, 16, 16, 0, 0]}>\n                    <Box display={['none', 'none', 'none', 'block']}>\n                        <ProductViewHeader\n                            name={product?.name}\n                            price={product?.price}\n                            currency={product?.currency}\n                            category={category}\n                        />\n                    </Box>\n                    <VStack align=\"stretch\" spacing={4}>\n                        {/*\n                            Customize the skeletons shown for attributes to suit your needs. At the point\n                            that we show the skeleton we do not know how many variations are selectable. So choose\n                            a a skeleton that will meet most of your needs.\n                        */}\n                        {showLoading ? (\n                            <>\n                                {/* First Attribute Skeleton */}\n                                <Skeleton height={6} width={32} />\n                                <Skeleton height={20} width={64} />\n\n                                {/* Second Attribute Skeleton */}\n                                <Skeleton height={6} width={32} />\n                                <Skeleton height={20} width={64} />\n                            </>\n                        ) : (\n                            <>\n                                {/* Attribute Swatches */}\n                                {variationAttributes.map((variationAttribute) => {\n                                    const {\n                                        id,\n                                        name,\n                                        selectedValue,\n                                        values = []\n                                    } = variationAttribute\n                                    return (\n                                        <SwatchGroup\n                                            key={id}\n                                            onChange={(_, href) => {\n                                                if (!href) return\n                                                history.replace(href)\n                                            }}\n                                            variant={id === 'color' ? 'circle' : 'square'}\n                                            value={selectedValue?.value}\n                                            displayName={selectedValue?.name || ''}\n                                            label={name}\n                                        >\n                                            {values.map(({href, name, image, value, orderable}) => (\n                                                <Swatch\n                                                    key={value}\n                                                    href={href}\n                                                    disabled={!orderable}\n                                                    value={value}\n                                                    name={name}\n                                                >\n                                                    {image ? (\n                                                        <Box\n                                                            height=\"100%\"\n                                                            width=\"100%\"\n                                                            minWidth=\"32px\"\n                                                            backgroundRepeat=\"no-repeat\"\n                                                            backgroundSize=\"cover\"\n                                                            backgroundColor={name.toLowerCase()}\n                                                            backgroundImage={\n                                                                image\n                                                                    ? `url(${image.disBaseLink})`\n                                                                    : ''\n                                                            }\n                                                        />\n                                                    ) : (\n                                                        name\n                                                    )}\n                                                </Swatch>\n                                            ))}\n                                        </SwatchGroup>\n                                    )\n                                })}\n                            </>\n                        )}\n\n                        {/* Quantity Selector */}\n                        <VStack align=\"stretch\" maxWidth={'200px'}>\n                            <Box fontWeight=\"bold\">\n                                <label htmlFor=\"quantity\">\n                                    {intl.formatMessage({\n                                        defaultMessage: 'Quantity'\n                                    })}\n                                    :\n                                </label>\n                            </Box>\n\n                            <QuantityPicker\n                                id=\"quantity\"\n                                step={stepQuantity}\n                                value={quantity}\n                                min={minOrderQuantity}\n                                onChange={(stringValue, numberValue) => {\n                                    // Set the Quantity of product to value of input if value number\n                                    if (numberValue >= 0) {\n                                        setQuantity(numberValue)\n                                    } else if (stringValue === '') {\n                                        // We want to allow the use to clear the input to start a new input so here we set the quantity to '' so NAN is not displayed\n                                        // User will not be able to add '' qauntity to the cart due to the add to cart button enablement rules\n                                        setQuantity(stringValue)\n                                    }\n                                }}\n                                onBlur={(e) => {\n                                    // Default to 1the `minOrderQuantity` if a user leaves the box with an invalid value\n                                    const value = e.target.value\n                                    if (parseInt(value) < 0 || value === '') {\n                                        setQuantity(minOrderQuantity)\n                                    }\n                                }}\n                                onFocus={(e) => {\n                                    // This is useful for mobile devices, this allows the user to pop open the keyboard and set the\n                                    // new quantity with one click. NOTE: This is something that can be refactored into the parent\n                                    // component, potentially as a prop called `selectInputOnFocus`.\n                                    e.target.select()\n                                }}\n                            />\n                        </VStack>\n                        <HideOnDesktop>\n                            {showFullLink && product && (\n                                <Link to={`/product/${product.master.masterId}`}>\n                                    <Text color=\"blue.600\">\n                                        {intl.formatMessage({\n                                            defaultMessage: 'See full details'\n                                        })}\n                                    </Text>\n                                </Link>\n                            )}\n                        </HideOnDesktop>\n                    </VStack>\n\n                    <Box display={['none', 'none', 'none', 'block']}>\n                        {!showLoading && showInventoryMessage && (\n                            <Fade in={true}>\n                                <Text color=\"orange.600\" fontWeight={600} marginBottom={8}>\n                                    {inventoryMessage}\n                                </Text>\n                            </Fade>\n                        )}\n                        {renderActionButtons()}\n                    </Box>\n                </VStack>\n            </Flex>\n            {/*Add to Cart Button for mobile versions*/}\n            <Box\n                position=\"fixed\"\n                bg=\"white\"\n                width=\"100%\"\n                display={['block', 'block', 'block', 'none']}\n                p={[4, 4, 6]}\n                left={0}\n                bottom={0}\n                zIndex={2}\n                boxShadow={theme.shadows.top}\n            >\n                {renderActionButtons()}\n            </Box>\n        </Flex>\n    )\n}\n\nProductView.propTypes = {\n    product: PropTypes.object,\n    category: PropTypes.array,\n    isProductLoading: PropTypes.bool,\n    isWishlistLoading: PropTypes.bool,\n    addToCart: PropTypes.func,\n    addToWishlist: PropTypes.func,\n    updateCart: PropTypes.func,\n    updateWishlist: PropTypes.func,\n    showFullLink: PropTypes.bool,\n    imageSize: PropTypes.oneOf(['sm', 'md'])\n}\n\nexport default ProductView\n"],"names":["React","PropTypes","Link","RouteLink","useIntl","Breadcrumb","ChakraBreadcrumb","BreadcrumbItem","ChakraBreadcrumbItem","BreadcrumbLink","ChakraBreadcrumbLink","useStyleConfig","ChevronRightIcon","categoryUrlBuilder","categories","rest","intl","styles","container","icon","map","category","id","locale","link","name","displayName","propTypes","array","useState","useMemo","useEffect","useLocation","AspectRatio","Box","Img","Flex","Skeleton","ChakraSkeleton","ListItem","List","useMultiStyleConfig","findImageGroupBy","EnterKeyNumber","LARGE","SMALL","size","heroImageSkeleton","Array","fill","_","index","thumbnailImageSkeleton","bool","ImageGallery","imageGroups","selectedVariationAttributes","selectedIndex","setSelectedIndex","location","heroImageGroup","viewType","search","thumbnailImageGroup","heroImage","images","thumbnailImages","alt","disBaseLink","image","selected","thumbnailImageItem","e","keyCode","object","string","Button","HStack","Input","useNumberInput","QuantityPicker","props","getInputProps","getIncrementButtonProps","getDecrementButtonProps","focusInputOnChange","onFocus","target","select","call","inc","variant","dec","input","maxWidth","textAlign","noop","SwatchGroup","children","value","label","onChange","swatchGroup","swatchLabel","swatchesWrapper","Children","child","childValue","cloneElement","key","oneOf","func","Center","Swatch","disabled","href","swatch","preventDefault","swatchButton","oneOfType","node","useHistory","Heading","Text","VStack","Fade","useTheme","useProduct","useAddToCartModalContext","withRegistration","useCurrency","ImageGallerySkeleton","HideOnDesktop","HideOnMobile","ProductViewHeader","price","currency","activeCurrency","formatNumber","style","number","ButtonWithRegistration","ProductView","product","showFullLink","imageSize","isWishlistLoading","addToCart","updateCart","addToWishlist","updateWishlist","isProductLoading","history","isOpen","isAddToCartModalOpen","onOpen","onAddToCartModalOpen","onClose","onAddToCartModalClose","theme","showLoading","showInventoryMessage","inventoryMessage","quantity","minOrderQuantity","setQuantity","variationParams","variationAttributes","stockLevel","stepQuantity","canAddToWishlist","canOrder","orderable","parseInt","renderActionButtons","buttons","handleCartItem","handleWishlistItem","push","formatMessage","defaultMessage","pathname","master","masterId","variationAttribute","selectedValue","values","replace","toLowerCase","stringValue","numberValue","shadows","top"],"sourceRoot":""}