{"version":3,"file":"pages-checkout.js","mappings":"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","sources":["webpack://bay-rewrite/./app/components/radio-card/index.jsx","webpack://bay-rewrite/./app/pages/checkout/index.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/cc-radio-group.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/checkout-skeleton.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/contact-info.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/payment-selection.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/payment.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/shipping-address-selection.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/shipping-address.jsx","webpack://bay-rewrite/./app/pages/checkout/partials/shipping-options.jsx","webpack://bay-rewrite/./app/pages/checkout/util/checkout-context.js","webpack://bay-rewrite/./app/pages/checkout/util/usePaymentForms.js"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Box, useRadio, useRadioGroup} from '@chakra-ui/react'\nimport {CheckIcon} from '../icons'\n\nconst RadioCardGroupContext = React.createContext()\n\nexport const RadioCard = (props) => {\n    const getRadioProps = React.useContext(RadioCardGroupContext)\n    const {getInputProps, getCheckboxProps} = useRadio(getRadioProps(props))\n\n    const input = getInputProps()\n    const checkbox = getCheckboxProps()\n    return (\n        <Box as=\"label\">\n            <input {...input} />\n            <Box\n                {...checkbox}\n                aria-hidden={false}\n                position=\"relative\"\n                cursor=\"pointer\"\n                border=\"1px solid\"\n                borderColor=\"gray.200\"\n                borderRadius=\"base\"\n                height=\"full\"\n                _checked={{\n                    borderColor: 'blue.600'\n                }}\n                _focus={{\n                    boxShadow: 'outline'\n                }}\n                px={4}\n                py={4}\n            >\n                {input.checked && (\n                    <Box\n                        position=\"absolute\"\n                        top={0}\n                        right={0}\n                        w={0}\n                        h={0}\n                        borderStyle=\"solid\"\n                        borderWidth=\"0 38px 38px 0\"\n                        borderColor=\"transparent\"\n                        borderRightColor=\"blue.600\"\n                    >\n                        <CheckIcon color=\"white\" position=\"absolute\" right=\"-40px\" top=\"1px\" />\n                    </Box>\n                )}\n\n                {props.children}\n            </Box>\n        </Box>\n    )\n}\n\nexport const RadioCardGroup = (props) => {\n    const {getRootProps, getRadioProps} = useRadioGroup(props)\n    const group = getRootProps()\n\n    return (\n        <RadioCardGroupContext.Provider value={getRadioProps}>\n            <Box {...group}>{props.children}</Box>\n        </RadioCardGroupContext.Provider>\n    )\n}\n\nRadioCard.propTypes = {children: PropTypes.any}\nRadioCardGroup.propTypes = {children: PropTypes.any}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useEffect, useState} from 'react'\nimport {FormattedMessage} from 'react-intl'\nimport {Alert, AlertIcon, Box, Button, Container, Grid, GridItem, Stack} from '@chakra-ui/react'\nimport useNavigation from '../../hooks/use-navigation'\nimport {CheckoutProvider, useCheckout} from './util/checkout-context'\nimport ContactInfo from './partials/contact-info'\nimport ShippingAddress from './partials/shipping-address'\nimport ShippingOptions from './partials/shipping-options'\nimport useCustomer from '../../commerce-api/hooks/useCustomer'\nimport useBasket from '../../commerce-api/hooks/useBasket'\nimport Payment from './partials/payment'\nimport CheckoutSkeleton from './partials/checkout-skeleton'\nimport OrderSummary from '../../components/order-summary'\n\nconst Checkout = () => {\n    const navigate = useNavigation()\n    const {globalError, step, placeOrder} = useCheckout()\n    const [isLoading, setIsLoading] = useState(false)\n\n    // Scroll to the top when we get a global error\n    useEffect(() => {\n        if (globalError || step === 4) {\n            window.scrollTo({top: 0})\n        }\n    }, [globalError, step])\n\n    const submitOrder = async () => {\n        setIsLoading(true)\n        try {\n            await placeOrder()\n            navigate('/checkout/confirmation')\n        } catch (error) {\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <Box background=\"gray.50\" flex=\"1\">\n            <Container\n                data-testid=\"sf-checkout-container\"\n                maxWidth=\"container.xl\"\n                py={{base: 7, lg: 16}}\n                px={{base: 0, lg: 8}}\n            >\n                <Grid templateColumns={{base: '1fr', lg: '66% 1fr'}} gap={{base: 10, xl: 20}}>\n                    <GridItem>\n                        <Stack spacing={4}>\n                            {globalError && (\n                                <Alert status=\"error\" variant=\"left-accent\">\n                                    <AlertIcon />\n                                    {globalError}\n                                </Alert>\n                            )}\n\n                            <ContactInfo />\n                            <ShippingAddress />\n                            <ShippingOptions />\n                            <Payment />\n\n                            {step === 4 && (\n                                <Box pt={3} display={{base: 'none', lg: 'block'}}>\n                                    <Container variant=\"form\">\n                                        <Button\n                                            w=\"full\"\n                                            onClick={submitOrder}\n                                            isLoading={isLoading}\n                                            data-testid=\"sf-checkout-place-order-btn\"\n                                        >\n                                            <FormattedMessage defaultMessage=\"Place Order\" />\n                                        </Button>\n                                    </Container>\n                                </Box>\n                            )}\n                        </Stack>\n                    </GridItem>\n\n                    <GridItem py={6} px={[4, 4, 4, 0]}>\n                        <OrderSummary showTaxEstimationForm={false} showCartItems={true} />\n\n                        {step === 4 && (\n                            <Box display={{base: 'none', lg: 'block'}} pt={2}>\n                                <Button w=\"full\" onClick={submitOrder} isLoading={isLoading}>\n                                    <FormattedMessage defaultMessage=\"Place Order\" />\n                                </Button>\n                            </Box>\n                        )}\n                    </GridItem>\n                </Grid>\n            </Container>\n\n            {step === 4 && (\n                <Box\n                    display={{lg: 'none'}}\n                    position=\"sticky\"\n                    bottom=\"0\"\n                    px={4}\n                    pt={6}\n                    pb={11}\n                    background=\"white\"\n                    borderTop=\"1px solid\"\n                    borderColor=\"gray.100\"\n                >\n                    <Container variant=\"form\">\n                        <Button w=\"full\" onClick={submitOrder} isLoading={isLoading}>\n                            <FormattedMessage defaultMessage=\"Place Order\" />\n                        </Button>\n                    </Container>\n                </Box>\n            )}\n        </Box>\n    )\n}\n\nconst CheckoutContainer = () => {\n    const customer = useCustomer()\n    const basket = useBasket()\n\n    if (!customer || !customer.customerId || !basket || !basket.basketId) {\n        return <CheckoutSkeleton />\n    }\n\n    return (\n        <CheckoutProvider>\n            <Checkout />\n        </CheckoutProvider>\n    )\n}\n\nexport default CheckoutContainer\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {FormattedMessage} from 'react-intl'\nimport {Box, Button, Stack, Text, SimpleGrid, FormControl, FormErrorMessage} from '@chakra-ui/react'\nimport {useCheckout} from '../util/checkout-context'\nimport {PlusIcon} from '../../../components/icons'\nimport {RadioCard, RadioCardGroup} from '../../../components/radio-card'\nimport {getCreditCardIcon} from '../../../utils/cc-utils'\n\nconst CCRadioGroup = ({\n    form,\n    value = '',\n    isEditingPayment = false,\n    togglePaymentEdit = () => null,\n    onPaymentIdChange = () => null\n}) => {\n    const {customer} = useCheckout()\n\n    return (\n        <FormControl\n            id=\"paymentInstrumentId\"\n            isInvalid={form.errors.paymentInstrumentId}\n            isRequired={!isEditingPayment}\n        >\n            {form.errors.paymentInstrumentId && (\n                <FormErrorMessage marginTop={0} marginBottom={4}>\n                    {form.errors.paymentInstrumentId.message}\n                </FormErrorMessage>\n            )}\n\n            <RadioCardGroup value={value} onChange={onPaymentIdChange}>\n                <Stack spacing={4}>\n                    <SimpleGrid columns={[1, 1, 2]} spacing={4}>\n                        {customer.paymentInstruments?.map((payment) => {\n                            const CardIcon = getCreditCardIcon(payment.paymentCard?.cardType)\n                            return (\n                                <RadioCard\n                                    key={payment.paymentInstrumentId}\n                                    value={payment.paymentInstrumentId}\n                                >\n                                    <Stack direction=\"row\">\n                                        {CardIcon && <CardIcon layerStyle=\"ccIcon\" />}\n                                        <Stack spacing={4}>\n                                            <Stack spacing={1}>\n                                                <Text>{payment.paymentCard?.cardType}</Text>\n                                                <Stack direction=\"row\">\n                                                    <Text>\n                                                        &bull;&bull;&bull;&bull;{' '}\n                                                        {payment.paymentCard?.numberLastDigits}\n                                                    </Text>\n                                                    <Text>\n                                                        {payment.paymentCard?.expirationMonth}/\n                                                        {payment.paymentCard?.expirationYear}\n                                                    </Text>\n                                                </Stack>\n                                                <Text>{payment.paymentCard.holder}</Text>\n                                            </Stack>\n\n                                            <Box>\n                                                <Button variant=\"link\" size=\"sm\" colorScheme=\"red\">\n                                                    <FormattedMessage defaultMessage=\"Remove\" />\n                                                </Button>\n                                            </Box>\n                                        </Stack>\n                                    </Stack>\n                                </RadioCard>\n                            )\n                        })}\n\n                        {!isEditingPayment && (\n                            <Button\n                                variant=\"outline\"\n                                border=\"1px dashed\"\n                                borderColor=\"gray.200\"\n                                color=\"blue.600\"\n                                height={{lg: 'full'}}\n                                minHeight={['44px', '44px', '154px']}\n                                rounded=\"base\"\n                                fontWeight=\"medium\"\n                                leftIcon={<PlusIcon boxSize={'15px'} />}\n                                onClick={togglePaymentEdit}\n                            >\n                                <FormattedMessage defaultMessage=\"Add New Card\" />\n                            </Button>\n                        )}\n                    </SimpleGrid>\n                </Stack>\n            </RadioCardGroup>\n        </FormControl>\n    )\n}\n\nCCRadioGroup.propTypes = {\n    /** The form object returned from `useForm` */\n    form: PropTypes.object.isRequired,\n\n    /** The current payment ID value */\n    value: PropTypes.string,\n\n    /** Flag for payment add/edit form, used for setting validation rules */\n    isEditingPayment: PropTypes.bool,\n\n    /** Method for toggling the payment add/edit form */\n    togglePaymentEdit: PropTypes.func,\n\n    /** Callback for notifying on value change */\n    onPaymentIdChange: PropTypes.func\n}\n\nexport default CCRadioGroup\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport {Box, Container, Grid, GridItem, Skeleton, Stack} from '@chakra-ui/react'\n\nconst CheckoutSkeleton = () => {\n    return (\n        <Box background=\"gray.50\" flex=\"1\">\n            <Container\n                data-testid=\"sf-checkout-skeleton\"\n                maxWidth=\"container.xl\"\n                py={{base: 7, lg: 16}}\n                px={{base: 0, lg: 4}}\n            >\n                <Grid templateColumns={{base: '1fr', lg: '66% 1fr'}} gap={{base: 10, lg: 20}}>\n                    <GridItem>\n                        <Stack spacing={4}>\n                            <Skeleton height=\"78px\" />\n                            <Skeleton height=\"78px\" />\n                            <Skeleton height=\"78px\" />\n                            <Skeleton height=\"78px\" />\n                        </Stack>\n                    </GridItem>\n\n                    <GridItem py={6} px={[4, 4, 0]}>\n                        <Stack spacing={5}>\n                            <Skeleton height=\"30px\" width=\"50%\" />\n\n                            <Stack spacing={5}>\n                                <Skeleton height=\"30px\" width=\"65%\" />\n\n                                <Stack w=\"full\" py={4} borderY=\"1px\" borderColor=\"gray.200\">\n                                    <Skeleton height={6} />\n                                    <Skeleton height={6} />\n                                    <Skeleton height={6} />\n                                </Stack>\n\n                                <Skeleton height={6} />\n                            </Stack>\n                        </Stack>\n                    </GridItem>\n                </Grid>\n            </Container>\n        </Box>\n    )\n}\n\nexport default CheckoutSkeleton\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useRef, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    Alert,\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogContent,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogOverlay,\n    AlertIcon,\n    Box,\n    Button,\n    Container,\n    Stack,\n    Text\n} from '@chakra-ui/react'\nimport {useHistory} from 'react-router-dom'\nimport {useForm} from 'react-hook-form'\nimport {FormattedMessage, useIntl} from 'react-intl'\nimport {useCheckout} from '../util/checkout-context'\nimport useLoginFields from '../../../components/forms/useLoginFields'\nimport {ToggleCard, ToggleCardEdit, ToggleCardSummary} from '../../../components/toggle-card'\nimport Field from '../../../components/field'\n\nconst ContactInfo = () => {\n    const {formatMessage} = useIntl()\n    const history = useHistory()\n\n    const {\n        customer,\n        basket,\n        isGuestCheckout,\n        setIsGuestCheckout,\n        step,\n        login,\n        setCheckoutStep,\n        goToNextStep\n    } = useCheckout()\n\n    const form = useForm({\n        defaultValues: {email: customer?.email || basket.customerInfo?.email || '', password: ''}\n    })\n\n    const fields = useLoginFields({form})\n\n    const [error, setError] = useState(null)\n    const [showPasswordField, setShowPasswordField] = useState(false)\n    const [signOutConfirmDialogIsOpen, setSignOutConfirmDialogIsOpen] = useState(false)\n\n    const submitForm = async (data) => {\n        setError(null)\n        try {\n            await login(data)\n            goToNextStep()\n        } catch (error) {\n            if (/invalid credentials/i.test(error.message)) {\n                setError(\n                    formatMessage({\n                        defaultMessage: 'Incorrect username or password, please try again.'\n                    })\n                )\n            } else {\n                setError(error.message)\n            }\n        }\n    }\n\n    const toggleGuestCheckout = () => {\n        if (error) {\n            setError(null)\n        }\n        setShowPasswordField(!showPasswordField)\n        setIsGuestCheckout(!isGuestCheckout)\n    }\n    return (\n        <ToggleCard\n            id=\"step-0\"\n            title={formatMessage({defaultMessage: 'Contact Info'})}\n            editing={step === 0}\n            isLoading={form.formState.isSubmitting}\n            onEdit={() => {\n                if (!isGuestCheckout) {\n                    setSignOutConfirmDialogIsOpen(true)\n                } else {\n                    setCheckoutStep(0)\n                }\n            }}\n            editLabel={\n                !isGuestCheckout ? <FormattedMessage defaultMessage=\"Sign Out\" /> : undefined\n            }\n        >\n            <ToggleCardEdit>\n                <Container variant=\"form\">\n                    <form onSubmit={form.handleSubmit(submitForm)}>\n                        <Stack spacing={6}>\n                            {error && (\n                                <Alert status=\"error\">\n                                    <AlertIcon />\n                                    {error}\n                                </Alert>\n                            )}\n\n                            <Stack spacing={5} position=\"relative\">\n                                <Field {...fields.email} />\n                                {showPasswordField && (\n                                    <Stack>\n                                        <Field {...fields.password} />\n                                        <Box>\n                                            <Button variant=\"link\" size=\"sm\">\n                                                <FormattedMessage defaultMessage=\"Forgot password?\" />\n                                            </Button>\n                                        </Box>\n                                    </Stack>\n                                )}\n                            </Stack>\n\n                            <Stack spacing={3}>\n                                <Button type=\"submit\">\n                                    {!showPasswordField ? (\n                                        <FormattedMessage defaultMessage=\"Checkout as guest\" />\n                                    ) : (\n                                        <FormattedMessage defaultMessage=\"Log in\" />\n                                    )}\n                                </Button>\n                                <Button variant=\"outline\" onClick={toggleGuestCheckout}>\n                                    {!showPasswordField ? (\n                                        <FormattedMessage defaultMessage=\"Already have an account? Log in\" />\n                                    ) : (\n                                        <FormattedMessage defaultMessage=\"Checkout as guest\" />\n                                    )}\n                                </Button>\n                            </Stack>\n                        </Stack>\n                    </form>\n                </Container>\n            </ToggleCardEdit>\n            <ToggleCardSummary>\n                <Text>{basket?.customerInfo?.email || customer?.email}</Text>\n\n                <SignOutConfirmationDialog\n                    isOpen={signOutConfirmDialogIsOpen}\n                    onClose={() => setSignOutConfirmDialogIsOpen(false)}\n                    onConfirm={async () => {\n                        await customer.logout()\n                        await basket.getOrCreateBasket()\n                        history.replace('/')\n                        setSignOutConfirmDialogIsOpen(false)\n                    }}\n                />\n            </ToggleCardSummary>\n        </ToggleCard>\n    )\n}\n\nconst SignOutConfirmationDialog = ({isOpen, onConfirm, onClose}) => {\n    const cancelRef = useRef()\n\n    return (\n        <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={onClose}>\n            <AlertDialogOverlay>\n                <AlertDialogContent>\n                    <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                        <FormattedMessage defaultMessage=\"Sign Out\" />\n                    </AlertDialogHeader>\n\n                    <AlertDialogBody>\n                        <FormattedMessage\n                            defaultMessage=\"Are you sure you want to sign out? You will need to sign back in to proceed\n                        with your current order.\"\n                        />\n                    </AlertDialogBody>\n\n                    <AlertDialogFooter>\n                        <Button ref={cancelRef} variant=\"outline\" onClick={onClose}>\n                            <FormattedMessage defaultMessage=\"Cancel\" />\n                        </Button>\n                        <Button colorScheme=\"red\" onClick={onConfirm} ml={3}>\n                            <FormattedMessage defaultMessage=\"Sign Out\" />\n                        </Button>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialogOverlay>\n        </AlertDialog>\n    )\n}\n\nSignOutConfirmationDialog.propTypes = {\n    isOpen: PropTypes.bool,\n    onClose: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default ContactInfo\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useState} from 'react'\nimport {FormattedMessage, FormattedNumber, useIntl} from 'react-intl'\nimport PropTypes from 'prop-types'\nimport {\n    Box,\n    Button,\n    Container,\n    Flex,\n    Heading,\n    Radio,\n    RadioGroup,\n    Stack,\n    Text,\n    Tooltip\n} from '@chakra-ui/react'\nimport {useForm, Controller} from 'react-hook-form'\nimport {LockIcon, PaypalIcon} from '../../../components/icons'\nimport {useCheckout} from '../util/checkout-context'\nimport CreditCardFields from '../../../components/forms/credit-card-fields'\nimport CCRadioGroup from './cc-radio-group'\n\nconst PaymentSelection = ({form, hideSubmitButton, onSubmit = () => null}) => {\n    const {formatMessage} = useIntl()\n    const {customer, basket} = useCheckout()\n\n    const hasSavedCards = customer?.paymentInstruments?.length > 0\n\n    const [isEditingPayment, setIsEditingPayment] = useState(!hasSavedCards)\n\n    form = form || useForm()\n\n    const submitForm = async (payment) => {\n        await onSubmit(payment)\n    }\n\n    // Acts as our `onChange` handler for paymentInstrumentId radio group. We do this\n    // manually here so we can toggle off the 'add payment' form as needed.\n    const onPaymentIdChange = (value) => {\n        if (value && isEditingPayment) {\n            togglePaymentEdit()\n        }\n        form.reset({paymentInstrumentId: value})\n    }\n\n    // Opens/closes the 'add payment' form. Notice that when toggling either state,\n    // we reset the form so as to remove any payment selection.\n    const togglePaymentEdit = () => {\n        form.reset({paymentInstrumentId: ''})\n        setIsEditingPayment(!isEditingPayment)\n        form.trigger()\n    }\n\n    return (\n        <form onSubmit={form.handleSubmit(submitForm)}>\n            <Stack spacing={8}>\n                <Stack spacing={5}>\n                    <Box border=\"1px solid\" borderColor=\"gray.100\" rounded=\"base\" overflow=\"hidden\">\n                        <RadioGroup value=\"cc\">\n                            <Box\n                                py={3}\n                                px={[4, 4, 6]}\n                                bg=\"gray.50\"\n                                borderBottom=\"1px solid\"\n                                borderColor=\"gray.100\"\n                            >\n                                <Radio value=\"cc\">\n                                    <Flex justify=\"space-between\">\n                                        <Stack direction=\"row\" align=\"center\">\n                                            <Text fontWeight=\"bold\">\n                                                <FormattedMessage defaultMessage=\"Credit Card\" />\n                                            </Text>\n                                            <Tooltip\n                                                hasArrow\n                                                placement=\"top\"\n                                                label={formatMessage({\n                                                    defaultMessage:\n                                                        'This is a secure SSL encrypted payment.'\n                                                })}\n                                            >\n                                                <LockIcon color=\"gray.700\" boxSize={5} />\n                                            </Tooltip>\n                                        </Stack>\n                                        <Text fontWeight=\"bold\">\n                                            <FormattedNumber\n                                                value={basket.orderTotal}\n                                                style=\"currency\"\n                                                currency={basket.currency}\n                                            />\n                                        </Text>\n                                    </Flex>\n                                </Radio>\n                            </Box>\n\n                            <Box p={[4, 4, 6]} borderBottom=\"1px solid\" borderColor=\"gray.100\">\n                                <Stack spacing={6}>\n                                    {hasSavedCards && (\n                                        <Controller\n                                            name=\"paymentInstrumentId\"\n                                            defaultValue=\"\"\n                                            control={form.control}\n                                            rules={{\n                                                required: !isEditingPayment\n                                                    ? formatMessage({\n                                                          defaultMessage:\n                                                              'Please select a payment method.'\n                                                      })\n                                                    : false\n                                            }}\n                                            render={({value}) => (\n                                                <CCRadioGroup\n                                                    form={form}\n                                                    value={value}\n                                                    isEditingPayment={isEditingPayment}\n                                                    togglePaymentEdit={togglePaymentEdit}\n                                                    onPaymentIdChange={onPaymentIdChange}\n                                                />\n                                            )}\n                                        />\n                                    )}\n\n                                    {isEditingPayment && (\n                                        <Box\n                                            {...(hasSavedCards && {\n                                                px: [4, 4, 6],\n                                                py: 6,\n                                                rounded: 'base',\n                                                border: '1px solid',\n                                                borderColor: 'blue.600'\n                                            })}\n                                        >\n                                            <Stack spacing={6}>\n                                                {hasSavedCards && (\n                                                    <Heading as=\"h3\" size=\"sm\">\n                                                        <FormattedMessage defaultMessage=\"Add New Card\" />\n                                                    </Heading>\n                                                )}\n\n                                                <CreditCardFields form={form} />\n\n                                                {!hideSubmitButton && (\n                                                    <Box>\n                                                        <Container variant=\"form\">\n                                                            <Button\n                                                                isLoading={\n                                                                    form.formState.isSubmitting\n                                                                }\n                                                                type=\"submit\"\n                                                                w=\"full\"\n                                                            >\n                                                                <FormattedMessage defaultMessage=\"Save & Continue\" />\n                                                            </Button>\n                                                        </Container>\n                                                    </Box>\n                                                )}\n                                            </Stack>\n                                        </Box>\n                                    )}\n                                </Stack>\n                            </Box>\n\n                            <Box py={3} px={[4, 4, 6]} bg=\"gray.50\" borderColor=\"gray.100\">\n                                <Radio value=\"paypal\">\n                                    <Box py=\"2px\">\n                                        <PaypalIcon width=\"auto\" height=\"20px\" />\n                                    </Box>\n                                </Radio>\n                            </Box>\n                        </RadioGroup>\n                    </Box>\n                </Stack>\n            </Stack>\n        </form>\n    )\n}\n\nPaymentSelection.propTypes = {\n    /** The form object returnd from `useForm` */\n    form: PropTypes.object,\n\n    /** Show or hide the submit button (for controlling the form from outside component) */\n    hideSubmitButton: PropTypes.bool,\n\n    /** Callback for form submit */\n    onSubmit: PropTypes.func\n}\n\nexport default PaymentSelection\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {FormattedMessage, useIntl} from 'react-intl'\nimport {Box, Button, Checkbox, Container, Heading, Stack, Text, Divider} from '@chakra-ui/react'\nimport {useCheckout} from '../util/checkout-context'\nimport usePaymentForms from '../util/usePaymentForms'\nimport {getCreditCardIcon} from '../../../utils/cc-utils'\nimport {ToggleCard, ToggleCardEdit, ToggleCardSummary} from '../../../components/toggle-card'\nimport PaymentSelection from './payment-selection'\nimport ShippingAddressSelection from './shipping-address-selection'\nimport AddressDisplay from '../../../components/address-display'\nimport {PromoCode, usePromoCode} from '../../../components/promo-code'\n\nconst Payment = () => {\n    const {formatMessage} = useIntl()\n\n    const {\n        step,\n        setCheckoutStep,\n        selectedShippingAddress,\n        selectedBillingAddress,\n        selectedPayment,\n        getPaymentMethods,\n        removePayment\n    } = useCheckout()\n\n    const {\n        paymentMethodForm,\n        billingAddressForm,\n        billingSameAsShipping,\n        setBillingSameAsShipping,\n        reviewOrder\n    } = usePaymentForms()\n\n    const {removePromoCode, ...promoCodeProps} = usePromoCode()\n\n    useEffect(() => {\n        getPaymentMethods()\n    }, [])\n\n    return (\n        <ToggleCard\n            id=\"step-3\"\n            title={formatMessage({defaultMessage: 'Payment'})}\n            editing={step === 3}\n            isLoading={\n                paymentMethodForm.formState.isSubmitting ||\n                billingAddressForm.formState.isSubmitting\n            }\n            disabled={selectedPayment == null}\n            onEdit={() => setCheckoutStep(3)}\n        >\n            <ToggleCardEdit>\n                <Box mt={-2} mb={4}>\n                    <PromoCode {...promoCodeProps} itemProps={{border: 'none'}} />\n                </Box>\n\n                <Stack spacing={6}>\n                    {!selectedPayment?.paymentCard ? (\n                        <PaymentSelection form={paymentMethodForm} hideSubmitButton />\n                    ) : (\n                        <Stack spacing={3}>\n                            <Heading as=\"h3\" fontSize=\"md\">\n                                <FormattedMessage defaultMessage=\"Credit Card\" />\n                            </Heading>\n                            <Stack direction=\"row\" spacing={4}>\n                                <PaymentCardSummary payment={selectedPayment} />\n                                <Button\n                                    variant=\"link\"\n                                    size=\"sm\"\n                                    colorScheme=\"red\"\n                                    onClick={removePayment}\n                                >\n                                    <FormattedMessage defaultMessage=\"Remove\" />\n                                </Button>\n                            </Stack>\n                        </Stack>\n                    )}\n\n                    <Divider borderColor=\"gray.100\" />\n\n                    <Stack spacing={2}>\n                        <Heading as=\"h3\" fontSize=\"md\">\n                            <FormattedMessage defaultMessage=\"Billing Address\" />\n                        </Heading>\n\n                        <Checkbox\n                            name=\"billingSameAsShipping\"\n                            isChecked={billingSameAsShipping}\n                            onChange={(e) => setBillingSameAsShipping(e.target.checked)}\n                        >\n                            <Text fontSize=\"sm\" color=\"gray.700\">\n                                <FormattedMessage defaultMessage=\"Same as shipping address\" />\n                            </Text>\n                        </Checkbox>\n\n                        {billingSameAsShipping && selectedShippingAddress && (\n                            <Box pl={7}>\n                                <AddressDisplay address={selectedShippingAddress} />\n                            </Box>\n                        )}\n                    </Stack>\n\n                    {!billingSameAsShipping && (\n                        <ShippingAddressSelection\n                            form={billingAddressForm}\n                            selectedAddress={selectedBillingAddress}\n                            hideSubmitButton\n                        />\n                    )}\n\n                    <Box pt={3}>\n                        <Container variant=\"form\">\n                            <Button w=\"full\" onClick={reviewOrder}>\n                                <FormattedMessage defaultMessage=\"Review Order\" />\n                            </Button>\n                        </Container>\n                    </Box>\n                </Stack>\n            </ToggleCardEdit>\n\n            <ToggleCardSummary>\n                <Stack spacing={6}>\n                    {selectedPayment && (\n                        <Stack spacing={3}>\n                            <Heading as=\"h3\" fontSize=\"md\">\n                                <FormattedMessage defaultMessage=\"Credit Card\" />\n                            </Heading>\n                            <PaymentCardSummary payment={selectedPayment} />\n                        </Stack>\n                    )}\n\n                    <Divider borderColor=\"gray.100\" />\n\n                    {selectedBillingAddress && (\n                        <Stack spacing={2}>\n                            <Heading as=\"h3\" fontSize=\"md\">\n                                <FormattedMessage defaultMessage=\"Billing Address\" />\n                            </Heading>\n                            <AddressDisplay address={selectedBillingAddress} />\n                        </Stack>\n                    )}\n                </Stack>\n            </ToggleCardSummary>\n        </ToggleCard>\n    )\n}\n\nconst PaymentCardSummary = ({payment}) => {\n    const CardIcon = getCreditCardIcon(payment?.paymentCard?.cardType)\n    return (\n        <Stack direction=\"row\" alignItems=\"center\" spacing={3}>\n            {CardIcon && <CardIcon layerStyle=\"ccIcon\" />}\n\n            <Stack direction=\"row\">\n                <Text>{payment.paymentCard.cardType}</Text>\n                <Text>&bull;&bull;&bull;&bull; {payment.paymentCard.numberLastDigits}</Text>\n                <Text>\n                    {payment.paymentCard.expirationMonth}/{payment.paymentCard.expirationYear}\n                </Text>\n            </Stack>\n        </Stack>\n    )\n}\n\nPaymentCardSummary.propTypes = {payment: PropTypes.object}\n\nexport default Payment\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {FormattedMessage, useIntl} from 'react-intl'\nimport {Box, Button, Container, Heading, SimpleGrid, Stack} from '@chakra-ui/react'\nimport {useForm, Controller} from 'react-hook-form'\nimport {shallowEquals} from '../../../utils/utils'\nimport {useCheckout} from '../util/checkout-context'\nimport {RadioCard, RadioCardGroup} from '../../../components/radio-card'\nimport ActionCard from '../../../components/action-card'\nimport {PlusIcon} from '../../../components/icons'\nimport AddressDisplay from '../../../components/address-display'\nimport AddressFields from '../../../components/forms/address-fields'\nimport FormActionButtons from '../../../components/forms/form-action-buttons'\n\nconst ShippingAddressEditForm = ({\n    title,\n    hasSavedAddresses,\n    toggleAddressEdit,\n    hideSubmitButton,\n    form,\n    submitButtonLabel\n}) => {\n    const {formatMessage} = useIntl()\n\n    return (\n        <Box\n            {...(hasSavedAddresses && {\n                gridColumn: [1, 1, 'span 2'],\n                paddingX: [4, 4, 6],\n                paddingY: 6,\n                rounded: 'base',\n                border: '1px solid',\n                borderColor: 'blue.600'\n            })}\n            data-testid=\"sf-shipping-address-edit-form\"\n        >\n            <Stack spacing={6}>\n                {hasSavedAddresses && (\n                    <Heading as=\"h3\" size=\"sm\">\n                        {title}\n                    </Heading>\n                )}\n\n                <Stack spacing={6}>\n                    <AddressFields form={form} />\n\n                    {hasSavedAddresses && !hideSubmitButton ? (\n                        <FormActionButtons\n                            saveButtonLabel={formatMessage({\n                                defaultMessage: 'Save & Continue to Shipping Method'\n                            })}\n                            onCancel={toggleAddressEdit}\n                        />\n                    ) : (\n                        !hideSubmitButton && (\n                            <Box>\n                                <Container variant=\"form\">\n                                    <Button\n                                        type=\"submit\"\n                                        width=\"full\"\n                                        disabled={form.formState.isSubmitting}\n                                    >\n                                        {formatMessage(\n                                            {\n                                                defaultMessage: '{submitButtonLabel}'\n                                            },\n                                            {\n                                                submitButtonLabel\n                                            }\n                                        )}\n                                    </Button>\n                                </Container>\n                            </Box>\n                        )\n                    )}\n                </Stack>\n            </Stack>\n        </Box>\n    )\n}\n\nShippingAddressEditForm.propTypes = {\n    title: PropTypes.string,\n    hasSavedAddresses: PropTypes.bool,\n    toggleAddressEdit: PropTypes.func,\n    hideSubmitButton: PropTypes.bool,\n    form: PropTypes.object,\n    submitButtonLabel: PropTypes.string\n}\n\nconst ShippingAddressSelection = ({\n    form,\n    selectedAddress,\n    submitButtonLabel = 'Submit',\n    hideSubmitButton = false,\n    onSubmit = async () => null\n}) => {\n    const {formatMessage} = useIntl()\n    const {customer} = useCheckout()\n    const hasSavedAddresses = customer.addresses && customer.addresses.length > 0\n    const [isEditingAddress, setIsEditingAddress] = useState(!hasSavedAddresses)\n    const [selectedAddressId, setSelectedAddressId] = useState(false)\n\n    form =\n        form ||\n        useForm({\n            mode: 'onChange',\n            shouldUnregister: false,\n            defaultValues: {\n                ...selectedAddress\n            }\n        })\n\n    const matchedAddress =\n        hasSavedAddresses &&\n        selectedAddress &&\n        customer.addresses.find((savedAddress) => {\n            const {addressId, creationDate, lastModified, preferred, ...address} = savedAddress\n            const {id, _type, ...selectedAddr} = selectedAddress\n            return shallowEquals(address, selectedAddr)\n        })\n\n    useEffect(() => {\n        // Automatically select the customer's default/preferred shipping address\n        if (customer.addresses) {\n            const address = customer.addresses.find((addr) => addr.preferred === true)\n            if (address) {\n                form.reset({...address})\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        // If the customer deletes all their saved addresses during checkout,\n        // we need to make sure to display the address form.\n        if (!customer?.addresses && !isEditingAddress) {\n            setIsEditingAddress(true)\n        }\n    }, [customer])\n\n    useEffect(() => {\n        if (matchedAddress) {\n            form.reset({\n                addressId: matchedAddress.addressId,\n                ...matchedAddress\n            })\n        }\n\n        if (!matchedAddress && selectedAddressId) {\n            setIsEditingAddress(true)\n        }\n    }, [matchedAddress])\n\n    // Updates the selected customer address if we've an address selected\n    // else saves a new customer address\n    const submitForm = async (address) => {\n        if (selectedAddressId) {\n            address = {...address, addressId: selectedAddressId}\n        }\n\n        setIsEditingAddress(false)\n        form.reset({addressId: ''})\n\n        await onSubmit(address)\n    }\n\n    // Acts as our `onChange` handler for addressId radio group. We do this\n    // manually here so we can toggle off the 'add address' form as needed.\n    const handleAddressIdSelection = (addressId) => {\n        if (addressId && isEditingAddress) {\n            setIsEditingAddress(false)\n        }\n\n        const address = customer.addresses.find((addr) => addr.addressId === addressId)\n\n        form.reset({...address})\n    }\n\n    const removeSavedAddress = async (addressId) => {\n        if (addressId === selectedAddressId) {\n            setSelectedAddressId(undefined)\n            setIsEditingAddress(false)\n            form.reset({addressId: ''})\n        }\n\n        await customer.removeSavedAddress(addressId)\n    }\n\n    // Opens/closes the 'add address' form. Notice that when toggling either state,\n    // we reset the form so as to remove any address selection.\n    const toggleAddressEdit = (address = undefined) => {\n        if (address?.addressId) {\n            setSelectedAddressId(address.addressId)\n            form.reset({...address})\n            setIsEditingAddress(true)\n        } else {\n            setSelectedAddressId(undefined)\n            form.reset({addressId: ''})\n            setIsEditingAddress(!isEditingAddress)\n        }\n\n        form.trigger()\n    }\n\n    return (\n        <form onSubmit={form.handleSubmit(submitForm)}>\n            <Stack spacing={4}>\n                {hasSavedAddresses && (\n                    <Controller\n                        name=\"addressId\"\n                        defaultValue=\"\"\n                        control={form.control}\n                        rules={{required: !isEditingAddress}}\n                        render={({value}) => (\n                            <RadioCardGroup value={value} onChange={handleAddressIdSelection}>\n                                <SimpleGrid\n                                    columns={[1, 1, 2]}\n                                    spacing={4}\n                                    gridAutoFlow=\"row dense\"\n                                >\n                                    {customer.addresses?.map((address, index) => (\n                                        <React.Fragment key={address.addressId}>\n                                            <RadioCard value={address.addressId}>\n                                                <ActionCard\n                                                    padding={0}\n                                                    border=\"none\"\n                                                    onRemove={() =>\n                                                        removeSavedAddress(address.addressId)\n                                                    }\n                                                    onEdit={() => toggleAddressEdit(address)}\n                                                    data-testid={`sf-checkout-shipping-address-${index}`}\n                                                >\n                                                    <AddressDisplay address={address} />\n                                                </ActionCard>\n                                                {/*Arrow up icon pointing to the address that is being edited*/}\n                                                {isEditingAddress &&\n                                                    address.addressId === selectedAddressId && (\n                                                        <Box\n                                                            width={3}\n                                                            height={3}\n                                                            borderLeft=\"1px solid\"\n                                                            borderTop=\"1px solid\"\n                                                            borderColor=\"blue.600\"\n                                                            position=\"absolute\"\n                                                            left=\"50%\"\n                                                            bottom=\"-23px\"\n                                                            background=\"white\"\n                                                            transform=\"rotate(45deg)\"\n                                                        />\n                                                    )}\n                                            </RadioCard>\n                                            {isEditingAddress &&\n                                                address.addressId === selectedAddressId && (\n                                                    <ShippingAddressEditForm\n                                                        title={formatMessage({\n                                                            defaultMessage: 'Edit Shipping Address'\n                                                        })}\n                                                        hasSavedAddresses={hasSavedAddresses}\n                                                        toggleAddressEdit={toggleAddressEdit}\n                                                        hideSubmitButton={hideSubmitButton}\n                                                        form={form}\n                                                        submitButtonLabel={submitButtonLabel}\n                                                    />\n                                                )}\n                                        </React.Fragment>\n                                    ))}\n\n                                    <Button\n                                        variant=\"outline\"\n                                        border=\"1px dashed\"\n                                        borderColor=\"gray.200\"\n                                        color=\"blue.600\"\n                                        height={['44px', '44px', '167px']}\n                                        rounded=\"base\"\n                                        fontWeight=\"medium\"\n                                        leftIcon={<PlusIcon boxSize={'15px'} />}\n                                        onClick={toggleAddressEdit}\n                                    >\n                                        <FormattedMessage defaultMessage=\"Add New Address\" />\n                                        {/*Arrow up icon pointing to the new address that is being added*/}\n                                        {isEditingAddress && !selectedAddressId && (\n                                            <Box\n                                                width={3}\n                                                height={3}\n                                                borderLeft=\"1px solid\"\n                                                borderTop=\"1px solid\"\n                                                borderColor=\"blue.600\"\n                                                position=\"absolute\"\n                                                left=\"50%\"\n                                                bottom=\"-23px\"\n                                                background=\"white\"\n                                                transform=\"rotate(45deg)\"\n                                            />\n                                        )}\n                                    </Button>\n                                </SimpleGrid>\n                            </RadioCardGroup>\n                        )}\n                    />\n                )}\n\n                {isEditingAddress && !selectedAddressId && (\n                    <ShippingAddressEditForm\n                        title={formatMessage({\n                            defaultMessage: 'Add New Address'\n                        })}\n                        hasSavedAddresses={hasSavedAddresses}\n                        toggleAddressEdit={toggleAddressEdit}\n                        hideSubmitButton={hideSubmitButton}\n                        form={form}\n                        submitButtonLabel={submitButtonLabel}\n                    />\n                )}\n\n                {!isEditingAddress && !hideSubmitButton && (\n                    <Box pt={2}>\n                        <Container variant=\"form\">\n                            <Button\n                                type=\"submit\"\n                                width=\"full\"\n                                disabled={!form.formState.isValid || form.formState.isSubmitting}\n                            >\n                                {formatMessage(\n                                    {\n                                        defaultMessage: '{submitButtonLabel}'\n                                    },\n                                    {submitButtonLabel}\n                                )}\n                            </Button>\n                        </Container>\n                    </Box>\n                )}\n            </Stack>\n        </form>\n    )\n}\n\nShippingAddressSelection.propTypes = {\n    /** The form object returnd from `useForm` */\n    form: PropTypes.object,\n\n    /** Optional address to use as default selection */\n    selectedAddress: PropTypes.object,\n\n    /** Override the submit button label */\n    submitButtonLabel: PropTypes.string,\n\n    /** Show or hide the submit button (for controlling the form from outside component) */\n    hideSubmitButton: PropTypes.bool,\n\n    /** Callback for form submit */\n    onSubmit: PropTypes.func\n}\n\nexport default ShippingAddressSelection\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useState} from 'react'\nimport {useIntl} from 'react-intl'\nimport {useCheckout} from '../util/checkout-context'\nimport {ToggleCard, ToggleCardEdit, ToggleCardSummary} from '../../../components/toggle-card'\nimport ShippingAddressSelection from './shipping-address-selection'\nimport AddressDisplay from '../../../components/address-display'\n\nexport default function ShippingAddress() {\n    const {formatMessage} = useIntl()\n\n    const {\n        step,\n        selectedShippingAddress,\n        setShippingAddress,\n        setCheckoutStep,\n        goToNextStep\n    } = useCheckout()\n    const [isLoading, setIsLoading] = useState()\n\n    const submitAndContinue = async (address) => {\n        setIsLoading(true)\n        await setShippingAddress(address)\n        goToNextStep()\n        setIsLoading(false)\n    }\n\n    return (\n        <ToggleCard\n            id=\"step-1\"\n            title={formatMessage({defaultMessage: 'Shipping Address'})}\n            editing={step === 1}\n            isLoading={isLoading}\n            disabled={selectedShippingAddress == null}\n            onEdit={() => setCheckoutStep(1)}\n        >\n            <ToggleCardEdit>\n                <ShippingAddressSelection\n                    selectedAddress={selectedShippingAddress}\n                    submitButtonLabel={formatMessage({\n                        defaultMessage: 'Continue to Shipping Method'\n                    })}\n                    onSubmit={submitAndContinue}\n                />\n            </ToggleCardEdit>\n            {selectedShippingAddress && (\n                <ToggleCardSummary>\n                    <AddressDisplay address={selectedShippingAddress} />\n                </ToggleCardSummary>\n            )}\n        </ToggleCard>\n    )\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useEffect} from 'react'\nimport {FormattedMessage, FormattedNumber, useIntl} from 'react-intl'\nimport {Box, Button, Container, Flex, Radio, RadioGroup, Stack, Text} from '@chakra-ui/react'\nimport {useForm, Controller} from 'react-hook-form'\nimport {useCheckout} from '../util/checkout-context'\nimport {ChevronDownIcon} from '../../../components/icons'\nimport {ToggleCard, ToggleCardEdit, ToggleCardSummary} from '../../../components/toggle-card'\n\nexport default function ShippingOptions() {\n    const {formatMessage} = useIntl()\n\n    const {\n        basket,\n        step,\n        shippingMethods,\n        getShippingMethods,\n        setCheckoutStep,\n        selectedShippingMethod,\n        selectedShippingAddress,\n        setShippingMethod,\n        goToNextStep\n    } = useCheckout()\n\n    const form = useForm({\n        shouldUnregister: false,\n        defaultValues: {\n            shippingMethodId: selectedShippingMethod?.id || shippingMethods?.defaultShippingMethodId\n        }\n    })\n\n    useEffect(() => {\n        if (step === 2) {\n            getShippingMethods()\n        }\n    }, [step])\n\n    useEffect(() => {\n        const defaultMethodId = shippingMethods?.defaultShippingMethodId\n        const methodId = form.getValues().shippingMethodId\n        if (!selectedShippingMethod && !methodId && defaultMethodId) {\n            form.reset({shippingMethodId: defaultMethodId})\n        }\n        if (selectedShippingMethod && methodId !== selectedShippingMethod.id) {\n            form.reset({shippingMethodId: selectedShippingMethod.id})\n        }\n    }, [selectedShippingMethod, shippingMethods])\n\n    const submitForm = async ({shippingMethodId}) => {\n        await setShippingMethod(shippingMethodId)\n        goToNextStep()\n    }\n\n    const shippingItem = basket?.shippingItems?.[0]\n\n    const selectedMethodDisplayPrice = Math.min(\n        shippingItem.price || 0,\n        shippingItem.priceAfterItemDiscount || 0\n    )\n\n    // Note that this card is disabled when there is no shipping address as well as no shipping method.\n    // We do this because we apply the default shipping method to the basket before checkout - so when\n    // landing on checkout the first time will put you at the first step (contact info), but the shipping\n    // method step would appear filled out already. This fix attempts to avoid any confusion in the UI.\n    return (\n        <ToggleCard\n            id=\"step-2\"\n            title={formatMessage({defaultMessage: 'Shipping & Gift Options'})}\n            editing={step === 2}\n            isLoading={form.formState.isSubmitting}\n            disabled={selectedShippingMethod == null || !selectedShippingAddress}\n            onEdit={() => setCheckoutStep(2)}\n        >\n            <ToggleCardEdit>\n                <form\n                    onSubmit={form.handleSubmit(submitForm)}\n                    data-testid=\"sf-checkout-shipping-options-form\"\n                >\n                    <Stack spacing={6}>\n                        {shippingMethods?.applicableShippingMethods && (\n                            <Controller\n                                name=\"shippingMethodId\"\n                                control={form.control}\n                                defaultValue=\"\"\n                                render={({value, onChange}) => (\n                                    <RadioGroup\n                                        name=\"shipping-options-radiogroup\"\n                                        value={value}\n                                        onChange={onChange}\n                                    >\n                                        <Stack spacing={5}>\n                                            {shippingMethods.applicableShippingMethods.map(\n                                                (opt) => (\n                                                    <Radio value={opt.id} key={opt.id}>\n                                                        <Flex justify=\"space-between\" w=\"full\">\n                                                            <Text>{opt.name}</Text>\n                                                            <Text fontWeight=\"bold\">\n                                                                <FormattedNumber\n                                                                    value={opt.price}\n                                                                    style=\"currency\"\n                                                                    currency={basket.currency}\n                                                                />\n                                                            </Text>\n                                                        </Flex>\n                                                        <Text fontSize=\"sm\" color=\"gray.600\">\n                                                            {opt.description}\n                                                        </Text>\n                                                        {opt.shippingPromotions?.map((promo) => {\n                                                            return (\n                                                                <Text\n                                                                    key={promo.promotionId}\n                                                                    fontSize=\"sm\"\n                                                                    color=\"green.500\"\n                                                                >\n                                                                    {promo.calloutMsg}\n                                                                </Text>\n                                                            )\n                                                        })}\n                                                    </Radio>\n                                                )\n                                            )}\n                                        </Stack>\n                                    </RadioGroup>\n                                )}\n                            />\n                        )}\n\n                        <Box>\n                            <Button variant=\"link\" size=\"sm\" rightIcon={<ChevronDownIcon />}>\n                                <FormattedMessage defaultMessage=\"Do you want to send this as a gift?\" />\n                            </Button>\n                        </Box>\n                        <Box>\n                            <Container variant=\"form\">\n                                <Button w=\"full\" type=\"submit\">\n                                    <FormattedMessage defaultMessage=\"Continue to Payment\" />\n                                </Button>\n                            </Container>\n                        </Box>\n                    </Stack>\n                </form>\n            </ToggleCardEdit>\n\n            {selectedShippingMethod && selectedShippingAddress && (\n                <ToggleCardSummary>\n                    <Flex justify=\"space-between\" w=\"full\">\n                        <Text>{selectedShippingMethod.name}</Text>\n                        <Flex alignItems=\"center\">\n                            <Text fontWeight=\"bold\">\n                                {selectedMethodDisplayPrice === 0 ? (\n                                    'Free'\n                                ) : (\n                                    <FormattedNumber\n                                        value={selectedMethodDisplayPrice}\n                                        style=\"currency\"\n                                        currency={basket.currency}\n                                    />\n                                )}\n                            </Text>\n                            {selectedMethodDisplayPrice !== shippingItem.price && (\n                                <Text\n                                    fontWeight=\"normal\"\n                                    textDecoration=\"line-through\"\n                                    color=\"gray.500\"\n                                    marginLeft={1}\n                                >\n                                    <FormattedNumber\n                                        style=\"currency\"\n                                        currency={basket.currency}\n                                        value={shippingItem.price}\n                                    />\n                                </Text>\n                            )}\n                        </Flex>\n                    </Flex>\n                    <Text fontSize=\"sm\" color=\"gray.700\">\n                        {selectedShippingMethod.description}\n                    </Text>\n                    {shippingItem?.priceAdjustments?.map((adjustment) => {\n                        return (\n                            <Text\n                                key={adjustment.priceAdjustmentId}\n                                fontSize=\"sm\"\n                                color=\"green.500\"\n                            >\n                                {adjustment.itemText}\n                            </Text>\n                        )\n                    })}\n                </ToggleCardSummary>\n            )}\n        </ToggleCard>\n    )\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport useBasket from '../../../commerce-api/hooks/useBasket'\nimport useCustomer from '../../../commerce-api/hooks/useCustomer'\nimport {useCommerceAPI} from '../../../commerce-api/contexts'\nimport {getPaymentInstrumentCardType} from '../../../utils/cc-utils'\nimport {isMatchingAddress} from '../../../utils/utils'\n\nconst CheckoutContext = React.createContext()\n\nexport const CheckoutProvider = ({children}) => {\n    const mounted = useRef()\n    const api = useCommerceAPI()\n    const customer = useCustomer()\n    const basket = useBasket()\n\n    const [state, setState] = useState({\n        // @TODO: use contants to represent checkout steps like const CHECKOUT_STEP_2_SHIPPING = 2\n        step: undefined,\n        isGuestCheckout: false,\n        shippingMethods: undefined,\n        paymentMethods: undefined,\n        globalError: undefined,\n        sectionError: undefined\n    })\n\n    const mergeState = useCallback((data) => {\n        // If we become unmounted during an async call that results in updating state, we\n        // skip the update to avoid React errors about setting state in unmounted components.\n        if (!mounted.current) {\n            return\n        }\n        setState((_state) => ({\n            ..._state,\n            ...data\n        }))\n    })\n\n    // We use this to track mounted state.\n    useEffect(() => {\n        mounted.current = true\n        return () => {\n            mounted.current = false\n        }\n    }, [])\n\n    useEffect(() => {\n        if (customer.isRegistered && state.isGuestCheckout) {\n            mergeState({isGuestCheckout: false})\n        }\n\n        if (customer.isGuest && basket.customerInfo?.email && !state.isGuestCheckout) {\n            mergeState({isGuestCheckout: true})\n        }\n\n        // Derive the starting step for checkout based on current state of basket.\n        // A failed condition sets the current step and returns early (order matters).\n        if (customer.customerId && basket.basketId && state.step == undefined) {\n            if (!basket.customerInfo?.email) {\n                mergeState({step: 0})\n                return\n            }\n            if (basket.shipments && !basket.shipments[0]?.shippingAddress) {\n                mergeState({step: 1})\n                return\n            }\n            if (basket.shipments && !basket.shipments[0]?.shippingMethod) {\n                mergeState({step: 2})\n                return\n            }\n            if (!basket.paymentInstruments || !basket.billingAddress) {\n                mergeState({step: 3})\n                return\n            }\n\n            mergeState({step: 4})\n        }\n    }, [customer, basket])\n\n    // We combine our state and actions into a single context object. This is much more\n    // convenient than having to import and bind actions seprately. State updates will\n    // cause this object to be reinitialized, which may lead to unecesary rerenders,\n    // however, the performance impact is negligible/non-existent. If performance\n    // becomes an issue later on, further steps may be taken to optimize it.\n    const ctx = React.useMemo(() => {\n        return {\n            ...state,\n\n            // Getter functions\n            // Provides convenient access to various data points and derivations.\n            // ----------------\n\n            get customer() {\n                return customer\n            },\n\n            get basket() {\n                return basket\n            },\n\n            get selectedShippingAddress() {\n                return basket.shipments && basket.shipments[0].shippingAddress\n            },\n\n            get selectedShippingMethod() {\n                return basket.shipments && basket.shipments[0].shippingMethod\n            },\n\n            get selectedPayment() {\n                return basket.paymentInstruments && basket.paymentInstruments[0]\n            },\n\n            get selectedBillingAddress() {\n                return basket.billingAddress\n            },\n\n            get isBillingSameAsShipping() {\n                if (!ctx.selectedShippingAddress) {\n                    return false\n                }\n                if (!ctx.selectedBillingAddress && ctx.selectedShippingAddress) {\n                    return true\n                }\n                const result = isMatchingAddress(\n                    ctx.selectedBillingAddress,\n                    ctx.selectedShippingAddress\n                )\n                return result\n            },\n\n            // Local state setters\n            // Callbacks/functions for setting local state data\n            // ----------------\n\n            goToNextStep() {\n                mergeState({step: state.step + 1})\n            },\n\n            setCheckoutStep(step) {\n                mergeState({step})\n            },\n\n            setIsGuestCheckout(isGuestCheckout) {\n                mergeState({isGuestCheckout})\n            },\n\n            // Async functions\n            // Convenience methods for interacting with remote customer and basket data.\n            // ----------------\n\n            /**\n             * Logs in a registered customer or applies a guest email to basket.\n             * @param {Object} credentials\n             */\n            async login({email, password}) {\n                if (!password) {\n                    await basket.updateCustomerInfo({email})\n                } else {\n                    await customer.login({email, password})\n                }\n            },\n\n            /**\n             * Applies the given address to the basket's shipment. Accepts CustomerAddress and OrderAddress.\n             * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/modules/shoppercustomers.html#customeraddress}\n             * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/modules/shoppercustomers.html#orderaddress}\n             * @param {Object} addressData\n             */\n            async setShippingAddress(addressData) {\n                const {\n                    id,\n                    preferred,\n                    creationDate,\n                    lastModified,\n                    addressId,\n                    addressName,\n                    ...address\n                } = addressData\n\n                await basket.setShippingAddress(address)\n\n                // Add/Update the address to the customer's account if they are registered.\n                if (!state.isGuestCheckout) {\n                    !addressId\n                        ? customer.addSavedAddress(address)\n                        : customer.updateSavedAddress({...address, addressId: addressId})\n                }\n            },\n\n            /**\n             * Removes a customer's saved address from their account.\n             * @param {string} addressId - The name/identifier of the address to be removed\n             */\n            async removeSavedAddress(addressId) {\n                await customer.removeSavedAddress(addressId)\n            },\n\n            /**\n             * Gets the applicable shipping methods for the basket's items and stores it in local state.\n             */\n            async getShippingMethods() {\n                const shippingMethods = await basket.getShippingMethods()\n                mergeState({shippingMethods})\n            },\n\n            /**\n             * Sets the shipment's shipping method on the basket.\n             * @param {string} id - The shipping method id from applicable shipping methods\n             */\n            async setShippingMethod(id) {\n                await basket.setShippingMethod(id)\n            },\n\n            /**\n             * Gets the applicable payment methods for the order.\n             */\n            async getPaymentMethods() {\n                const paymentMethods = await api.shopperBaskets.getPaymentMethodsForBasket({\n                    parameters: {basketId: basket.basketId}\n                })\n                mergeState({paymentMethods})\n            },\n\n            /**\n             * Applies the given payment instrument to the basket.\n             * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/modules/shoppercustomers.html#orderpaymentinstrument}\n             * @param {Object} payment\n             */\n            async setPayment(payment) {\n                const {expiry, paymentInstrumentId, ...selectedPayment} = payment\n\n                if (paymentInstrumentId) {\n                    // Customer selected a saved card\n                    await basket.setPaymentInstrument({\n                        customerPaymentInstrumentId: paymentInstrumentId\n                    })\n                    return\n                }\n\n                // The form gives us the expiration date as `MM/YY` - so we need to split it into\n                // month and year to submit them as individual fields.\n                const [expirationMonth, expirationYear] = expiry.split('/')\n\n                const paymentInstrument = {\n                    paymentMethodId: 'CREDIT_CARD',\n                    paymentCard: {\n                        ...selectedPayment,\n                        number: selectedPayment.number.replace(/ /g, ''),\n                        cardType: getPaymentInstrumentCardType(selectedPayment.cardType),\n                        expirationMonth: parseInt(expirationMonth),\n                        expirationYear: parseInt(`20${expirationYear}`),\n\n                        // TODO: These fields are required for saving the card to the customer's\n                        // account. Im not sure what they are for or how to get them, so for now\n                        // we're just passing some values to make it work. Need to investigate.\n                        issueNumber: '',\n                        validFromMonth: 1,\n                        validFromYear: 2020\n                    }\n                }\n\n                await basket.setPaymentInstrument(paymentInstrument)\n\n                // Save the payment instrument to the customer's account if they are registered\n                if (!state.isGuestCheckout && !selectedPayment.id) {\n                    customer.addSavedPaymentInstrument(paymentInstrument)\n                }\n            },\n\n            /**\n             * Removes the currently applied payment instrument from the basket. Multiple payment\n             * instruments can be applied to the basket, however we are only dealing with one.\n             */\n            async removePayment() {\n                await basket.removePaymentInstrument()\n            },\n\n            /**\n             * Applies the given address to the basket's billing address. Accepts CustomerAddress and OrderAddress.\n             * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/modules/shoppercustomers.html#customeraddress}\n             * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/modules/shoppercustomers.html#orderaddress}\n             * @param {Object} addressData\n             */\n            async setBillingAddress(addressData) {\n                const {\n                    id,\n                    preferred,\n                    creationDate,\n                    lastModified,\n                    addressId,\n                    addressName,\n                    ...address\n                } = addressData\n\n                await basket.setBillingAddress(address)\n\n                // Save the address to the customer's account if they are registered and its a new address\n                if (!state.isGuestCheckout && !id && !addressId) {\n                    customer.addSavedAddress(address)\n                }\n            },\n\n            async placeOrder() {\n                mergeState({globalError: undefined})\n                try {\n                    await basket.createOrder()\n                } catch (error) {\n                    mergeState({globalError: error.message})\n                    throw error\n                }\n            }\n        }\n    }, [state, customer, basket, mergeState])\n\n    return <CheckoutContext.Provider value={ctx}>{children}</CheckoutContext.Provider>\n}\n\nCheckoutProvider.propTypes = {\n    children: PropTypes.any\n}\n\n/**\n * A hook for managing checkout state and actions\n * @returns {Object} Checkout data and actions\n */\nexport const useCheckout = () => {\n    return React.useContext(CheckoutContext)\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport {useEffect, useState} from 'react'\nimport {useForm} from 'react-hook-form'\nimport {useCheckout} from '../util/checkout-context'\n\n/**\n * A hook for managing and coordinating the billing address and payment method forms.\n * @returns {Object}\n */\nconst usePaymentForms = () => {\n    const {\n        selectedPayment,\n        selectedBillingAddress,\n        selectedShippingAddress,\n        setPayment,\n        setBillingAddress,\n        isBillingSameAsShipping,\n        goToNextStep\n    } = useCheckout()\n\n    // This local state value manages the 'checked' state of the billing address form's\n    // checkbox for `Same as shipping address`. We initialize its value by checking if the\n    // currently applied billing address matches the currently applied shipping address.\n    const [billingSameAsShipping, setBillingSameAsShipping] = useState(isBillingSameAsShipping)\n\n    const paymentMethodForm = useForm()\n\n    const billingAddressForm = useForm({\n        mode: 'onChange',\n        shouldUnregister: false,\n        defaultValues: {...selectedBillingAddress}\n    })\n\n    // This effect watches for changes to our basket's shipping/billing address. If they\n    // are applied to the basket and they match, we update our local state value for the\n    // `Same as shipping address` checkbox. This is necessary because when we initialized\n    // `billingSameAsShipping` in `useState`, we may not have had the basket data yet, so\n    // this ensures its properly set and in sync with our basket's state.\n    useEffect(() => {\n        if (!billingSameAsShipping && isBillingSameAsShipping) {\n            setBillingSameAsShipping(true)\n        }\n    }, [isBillingSameAsShipping])\n\n    const submitPaymentMethodForm = async (payment) => {\n        // Make sure we only apply the payment if there isnt already one applied.\n        // This works because a payment cannot be edited, only removed. In the UI,\n        // we ensure that the any applied payment is removed before showing the\n        // the payment form.\n        if (!selectedPayment) {\n            await setPayment(payment)\n        }\n\n        // Once the payment is applied to the basket, we submit the billing address.\n        return billingAddressForm.handleSubmit(submitBillingAddressForm)()\n    }\n\n    const submitBillingAddressForm = async (address) => {\n        if (!billingSameAsShipping) {\n            await setBillingAddress(address)\n        } else {\n            await setBillingAddress(selectedShippingAddress)\n        }\n\n        // Once the billing address is applied to the basket, we can move to the final\n        // step in the process, which lets the customer review all checkout info.\n        goToNextStep()\n    }\n\n    // We need to submit the payment form and billing address form one at a time,\n    // but from a single control/button. So we kick off the payment submit first\n    // and let that function take over the next step.\n    // ------\n    // TODO: Figure out how to run the form validations simultaneuously before\n    // submitting the forms, so one doesn't need to wait on the other to check for\n    // client-side validation errors.\n    const reviewOrder = () => {\n        return paymentMethodForm.handleSubmit(submitPaymentMethodForm)()\n    }\n\n    return {\n        paymentMethodForm,\n        billingAddressForm,\n        billingSameAsShipping,\n        setBillingSameAsShipping,\n        reviewOrder\n    }\n}\n\nexport default usePaymentForms\n"],"names":["React","PropTypes","Box","useRadio","useRadioGroup","CheckIcon","RadioCardGroupContext","createContext","RadioCard","props","getRadioProps","useContext","getInputProps","getCheckboxProps","input","checkbox","borderColor","boxShadow","checked","children","RadioCardGroup","getRootProps","group","propTypes","any","useEffect","useState","FormattedMessage","Alert","AlertIcon","Button","Container","Grid","GridItem","Stack","useNavigation","CheckoutProvider","useCheckout","ContactInfo","ShippingAddress","ShippingOptions","useCustomer","useBasket","Payment","CheckoutSkeleton","OrderSummary","Checkout","navigate","globalError","step","placeOrder","isLoading","setIsLoading","window","scrollTo","top","submitOrder","error","base","lg","xl","CheckoutContainer","customer","basket","customerId","basketId","Text","SimpleGrid","FormControl","FormErrorMessage","PlusIcon","getCreditCardIcon","CCRadioGroup","form","value","isEditingPayment","togglePaymentEdit","onPaymentIdChange","errors","paymentInstrumentId","message","paymentInstruments","map","payment","CardIcon","paymentCard","cardType","numberLastDigits","expirationMonth","expirationYear","holder","object","isRequired","string","bool","func","Skeleton","useRef","AlertDialog","AlertDialogBody","AlertDialogContent","AlertDialogFooter","AlertDialogHeader","AlertDialogOverlay","useHistory","useForm","useIntl","useLoginFields","ToggleCard","ToggleCardEdit","ToggleCardSummary","Field","formatMessage","history","isGuestCheckout","setIsGuestCheckout","login","setCheckoutStep","goToNextStep","defaultValues","email","customerInfo","password","fields","setError","showPasswordField","setShowPasswordField","signOutConfirmDialogIsOpen","setSignOutConfirmDialogIsOpen","submitForm","data","test","defaultMessage","toggleGuestCheckout","formState","isSubmitting","undefined","handleSubmit","logout","getOrCreateBasket","replace","SignOutConfirmationDialog","isOpen","onConfirm","onClose","cancelRef","FormattedNumber","Flex","Heading","Radio","RadioGroup","Tooltip","Controller","LockIcon","PaypalIcon","CreditCardFields","PaymentSelection","hideSubmitButton","onSubmit","hasSavedCards","length","setIsEditingPayment","reset","trigger","orderTotal","currency","control","required","px","py","rounded","border","Checkbox","Divider","usePaymentForms","ShippingAddressSelection","AddressDisplay","PromoCode","usePromoCode","selectedShippingAddress","selectedBillingAddress","selectedPayment","getPaymentMethods","removePayment","paymentMethodForm","billingAddressForm","billingSameAsShipping","setBillingSameAsShipping","reviewOrder","removePromoCode","promoCodeProps","e","target","PaymentCardSummary","shallowEquals","ActionCard","AddressFields","FormActionButtons","ShippingAddressEditForm","title","hasSavedAddresses","toggleAddressEdit","submitButtonLabel","gridColumn","paddingX","paddingY","selectedAddress","addresses","isEditingAddress","setIsEditingAddress","selectedAddressId","setSelectedAddressId","mode","shouldUnregister","matchedAddress","find","savedAddress","addressId","creationDate","lastModified","preferred","address","id","_type","selectedAddr","addr","handleAddressIdSelection","removeSavedAddress","index","isValid","setShippingAddress","submitAndContinue","ChevronDownIcon","shippingMethods","getShippingMethods","selectedShippingMethod","setShippingMethod","shippingMethodId","defaultShippingMethodId","defaultMethodId","methodId","getValues","shippingItem","shippingItems","selectedMethodDisplayPrice","Math","min","price","priceAfterItemDiscount","applicableShippingMethods","onChange","opt","name","description","shippingPromotions","promo","promotionId","calloutMsg","priceAdjustments","adjustment","priceAdjustmentId","itemText","useCallback","useCommerceAPI","getPaymentInstrumentCardType","isMatchingAddress","CheckoutContext","mounted","api","state","setState","paymentMethods","sectionError","mergeState","current","_state","isRegistered","isGuest","shipments","shippingAddress","shippingMethod","billingAddress","ctx","useMemo","isBillingSameAsShipping","result","updateCustomerInfo","addressData","addressName","addSavedAddress","updateSavedAddress","shopperBaskets","getPaymentMethodsForBasket","parameters","setPayment","expiry","setPaymentInstrument","customerPaymentInstrumentId","split","paymentInstrument","paymentMethodId","number","parseInt","issueNumber","validFromMonth","validFromYear","addSavedPaymentInstrument","removePaymentInstrument","setBillingAddress","createOrder","submitPaymentMethodForm","submitBillingAddressForm"],"sourceRoot":""}